[
    {
        "id": "cbd68ba9caa96a3d",
        "type": "tab",
        "label": "Timer",
        "disabled": false,
        "info": "### Time Based automation\n\n#### Configuration\n\nThis flow contains a `function` node that uses the [suncalc](https://github.com/mourner/suncalc) package and relies on `LATITUDE` and `LONGITUDE` environment variables to specify the geographic coordinates used in determining sunrise and sunset.\n\n> _Geographic coordinates are an example of sensitive personal information that should generally be kept out of flows that might be shared as examples in a forum, pushed to a public source control repository etc._\n\nYou can specify environment variables for use in your flows in a number of ways, depending on your preferences and your overall Node-RED configuration. For most \"mainstream\" scenarios, the simplest way would be to add them to the _~/.node-red/environment_ file in the home directory of the user as whom the Node-RED service is running.\n\n#### Time of Day\n\nThe `link out` node named _asdf_ is where time-based automation flows should start, e.g. to adjust lighting, window coverings, HVAC settings etc. for different times of day:\n\n| `msg.payload` | Descrption                                                   |\n|---------------|--------------------------------------------------------------|\n| `morning`     | Sunrise to _offset_ hours after sunrise                      |\n| `midday`      | _Offset_ hours after sunrise to _offset_ hours before sunset |\n| `afternoon`   | _Offset_ hours before sunset to sunset                       |\n| `evening`     | Sunset to _bedtime_                                          |\n| `night`       | _Bedtime_ to sunrise                                         |\n\n_Offset_ is one third of the number of hours between sunrise and sunset.\n\n_Bedtime_ is generated each day to occur at the later of:\n\n- 10:00PM (22:00), plus or minus a randomly generated 30 minute offset\n- a randomly generated time, 30 to 60 minutes after sunset\n\n> _Five distinct times of day may seem excessive, but has proven necessary in a number of real-world scenarios. For example, the distinctions between `morning`, `midday` and `afternoon` are invaluable for homes with automated coverings over both East- and West-facing windows. In addition, randomizing `bedtime` can provide a modest degree of \"simulated presence\" to discourage potential burglars._\n\n#### Theme\n\nIn addition to the time-of-day specified by `msg.payload`, as described above, automation flows can also assume that `global.theme` will have been set to a value indicating any special occasions that might be effect:\n\n| `global.theme` | Description         |\n|----------------|---------------------|\n| `tribal`       | July 1 - 4          |\n| `spooky`       | Any day in October  |\n| `jolly`        | Any day in December |\n| `standard`     | Any other day       |",
        "env": []
    },
    {
        "id": "ff0141ba0f0c7234",
        "type": "tab",
        "label": "Automation",
        "disabled": false,
        "info": "Change the flows inside the groups \"lighting automation\" and \"window shade automation\" according to your desired behavior for your hardware setup",
        "env": []
    },
    {
        "id": "c7141ffb22d64190",
        "type": "tab",
        "label": "Ground Floor Hue",
        "disabled": false,
        "info": "There should be a flow similar to this tab for each Hue Bridge you wish to control.\n\nThe subflows on this tab assume the following configuration:\n\n| Environment Variable | Description                                                                     |\n|----------------------|---------------------------------------------------------------------------------|\n| `ADDRESS`            | IP address or host name of the Hue Bridge                                       |\n| `KEY`                | The client application key to use when invoking the Hue API                     |\n| `TOPIC`              | The base topic to prepend to each server-sent event forwarded as a MQTT message |\n\nUse the `inject` node named _create key_ within 30 seconds of pressing the button on top of the Hue Bridge to generate a value to use for `${KEY}`."
    },
    {
        "id": "810a8b527afd2b1b",
        "type": "tab",
        "label": "Basement Hue",
        "disabled": false,
        "info": "There should be a flow similar to this tab for each Hue Bridge you wish to control.\n\nThe subflows on this tab assume the following configuration:\n\n| Environment Variable | Description                                                                     |\n|----------------------|---------------------------------------------------------------------------------|\n| `ADDRESS`            | IP address or host name of the Hue Bridge                                       |\n| `KEY`                | The client application key to use when invoking the Hue API                     |\n| `TOPIC`              | The base topic to prepend to each server-sent event forwarded as a MQTT message |\n\nUse the `inject` node named _create key_ within 30 seconds of pressing the button on top of the Hue Bridge to generate a value to use for `${KEY}`.",
        "env": []
    },
    {
        "id": "1cf0490e7de2f93d",
        "type": "tab",
        "label": "PowerView",
        "disabled": false,
        "info": "The subflows on this tab assume that `${ADDRESS}` is set to the IP address or host name of the PowerView hub.",
        "env": [
            {
                "name": "ADDRESS",
                "value": "POWERVIEW_ADDRESS",
                "type": "env"
            }
        ]
    },
    {
        "id": "b12fd38c090c51f2",
        "type": "tab",
        "label": "Dashboard",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5785c8d9f39df67e",
        "type": "subflow",
        "name": "Send to Hue Bridge",
        "info": "# Overview\n\nSend a message to the API (version 2) on a given Hue Bridge.\n\nSee <https://developers.meethue.com/develop/hue-api-v2/> for details.\n\n_**Note:** the intent is for this subflow to be used for_ every _message sent to a given Hue bridge so as to enforce the rate limits described in the Hue API documentation._\n\n# Configuration\n\n| Environment Variable | Description                         |\n|----------------------|-------------------------------------|\n| `ADDRESS`            | Bridge's IP address                 |\n| `KEY`                | Client access token for the message |\n\n# Input\n\n| Message Property | Description                                                                |\n|------------------|----------------------------------------------------------------------------|\n| `msg.topic`      | API URI, e.g. `resource`, `room/0ca8f049-7ac9-4872-8069-4770834e4f11` etc. |\n| `msg.payload`    | Request body, if any                                                       |\n| `msg.method`     | HTTP request method, e.g. `GET`, `PUT` etc                                 |\n\n# Outputs\n\nIf successful, the HTTP response will be sent as a parsed JSON object in `msg.payload` from output 1.\n\nA standard Node-RED error message will be sent on output 2 if the `http request` node throws an exception.",
        "category": "hue",
        "in": [
            {
                "x": 60,
                "y": 60,
                "wires": [
                    {
                        "id": "c9c806d81ab63ac4"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 620,
                "y": 60,
                "wires": [
                    {
                        "id": "20ac42d7649c260a",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "ADDRESS",
                "type": "env",
                "value": "ADDRESS"
            },
            {
                "name": "KEY",
                "type": "env",
                "value": "KEY"
            }
        ],
        "meta": {
            "module": "@parasaurolophus/node-red-send-to-hue-bridge",
            "type": "send-to-hue-bridge",
            "version": "1.0.0",
            "author": "parasaurolophus <apps@rader.us>",
            "desc": "Send a command to the Hue Bridge API",
            "keywords": "philips,hue,http",
            "license": "MIT"
        },
        "color": "#AA77AA",
        "icon": "font-awesome/fa-lightbulb-o",
        "status": {
            "x": 620,
            "y": 140,
            "wires": [
                {
                    "id": "1e35b6e766e6b3d1",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "75bc72a16c4da2c8",
        "type": "subflow",
        "name": "Create Hue Application Key",
        "info": "# Overview\n\nInvoke the Hue Bridge API to create a client access token.\n\n_**N.B.:** Invoke this subflow within 30 seconds of pressing the button on top of the bridge. Watch the debug console output to see the response. If successful, you will see the generated key among the response payload's properties._\n\nSee <https://developers.meethue.com/develop/hue-api-v2/getting-started/> for details.\n\n# Configuration\n\n| Environment Variable | Description                                    |\n|----------------------|------------------------------------------------|\n|`ADDRESS`             | Bridge's IP address                            |\n| `USERNAME`           | \"User name\" for which a key is being generated |\n\n# Input\n\nIncoming message triggers HTTP request but is otherwise ignored.\n\n# Output\n\nThe HTTP response will be sent as a parsed JSON object. If successful, look for the value of the `msg.payload.success.username` property in the output. That is the string you should use as the access token header in all subsequent Hue Bridge API request messages.",
        "category": "hue",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "7316ae1eef4c6295"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 440,
                "y": 40,
                "wires": [
                    {
                        "id": "e4718ecfdb248cc7",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "ADDRESS",
                "type": "env",
                "value": "ADDRESS"
            },
            {
                "name": "USERNAME",
                "type": "env",
                "value": "USERNAME"
            }
        ],
        "meta": {
            "module": "@parasaurolophus/node-red-create-hue-application-key",
            "type": "create-hue-application-key",
            "version": "1.0.0",
            "author": "parasaurolophus <apps@rader.us>",
            "desc": "Invoke the Hue Bridge API for registering a client",
            "keywords": "philips,hue,http",
            "license": "MIT"
        },
        "color": "#AA77AA",
        "icon": "font-awesome/fa-lightbulb-o",
        "status": {
            "x": 440,
            "y": 100,
            "wires": [
                {
                    "id": "64ad1b43047cb836",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "9c4e4702e4660adf",
        "type": "subflow",
        "name": "Set PowerView Scene",
        "info": "# Overview\n\nUse the _Hunter Douglas PowerView_&reg; hub API to activate a given window shade scene.\n\nSee <https://motorisation.hde.nl/hd/powerview/general-guides/API/> for details.\n\n# Configuration\n\nThe `ADDRESS` environment variable must be configured with the IP address of the hub.\n\n# Input\n\n`msg.payload` containing the id of the scene to activate.\n\nAll other input message properties are ignored by the subflow but care should be taken not to pass any through that could affect the behavior of a `http request` node in unintended ways.\n\n# Output\n\nHTTP response from the hub.\n\n# Side Effects\n\nIf successful, the window shades will move to the settings defined by the specified scene as configured using the _PowerView_&reg; mobile app.",
        "category": "powerview",
        "in": [
            {
                "x": 60,
                "y": 60,
                "wires": [
                    {
                        "id": "dcd553804e687131"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 600,
                "y": 60,
                "wires": [
                    {
                        "id": "8dc3bcf508fc6c98",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "ADDRESS",
                "type": "env",
                "value": "ADDRESS"
            }
        ],
        "meta": {
            "module": "@parasaurolophus/node-red-set-powerview-scene",
            "type": "set-powerview-scene",
            "version": "1.0.0",
            "author": "parasaurolophus <apps@rader.us>",
            "desc": "Activate a PowerView scene",
            "keywords": "hunter douglas,powerview",
            "license": "MIT"
        },
        "color": "#C0DEED",
        "icon": "font-awesome/fa-align-justify",
        "status": {
            "x": 600,
            "y": 140,
            "wires": [
                {
                    "id": "728ab503eb1eb941",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "4920eed654c67f8d",
        "type": "subflow",
        "name": "Request PowerView Metadata",
        "info": "",
        "category": "powerview",
        "in": [
            {
                "x": 60,
                "y": 100,
                "wires": [
                    {
                        "id": "465f820637e0f695"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 460,
                "y": 60,
                "wires": [
                    {
                        "id": "e62fe5c7c72b90ee",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "ADDRESS",
                "type": "env",
                "value": "ADDRESS"
            }
        ],
        "meta": {
            "module": "@parasaurolophus/node-red-request-powerview-metadata",
            "type": "request-powerview-metadata",
            "version": "1.0.0",
            "author": "parasaurolophus <apps@rader.us>",
            "desc": "Send a request to a PowerView hub to get metadata for a room or scene",
            "keywords": "powerview,hunter douglas",
            "license": "MIT"
        },
        "color": "#C0DEED",
        "icon": "font-awesome/fa-align-justify",
        "status": {
            "x": 660,
            "y": 180,
            "wires": [
                {
                    "id": "014121091f945d16",
                    "port": 0
                },
                {
                    "id": "35c708b92ea8024b",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "4e89e7c952d56c09",
        "type": "subflow",
        "name": "Hue to MQTT",
        "info": "# Overview\n\nThis subflow:\n\n- Caches the state of Philips Hue devices in flow context using the response  to an invocation of the `/resource` end-point of the [Philips Hue Bridge V2 API](https://developers.meethue.com/develop/hue-api-v2/api-reference/#resource).\n\n- Outputs a stream of individual event messages as the cached devices' states change by subscribing to [SSE messages](https://developers.meethue.com/develop/hue-api-v2/core-concepts/#events).\n\nEach event message will have appropriate MQTT topic, QoS and retain properties set in addition to the payload sent by the Hue bridge.\n\n_**Note:** the `switch` node named \"filter resources\" in this subflow is used to restrict the number of messages processed at startup to only those types of resources likely to be of interest to Node-RED based automation. This means that over time you will receive SSE messages for resources whose state did not appear in the initial output from this subflow. If you wish for 100% consistency across all resource types, remove the \"filter resources\" node from between the two `split` nodes, but be warned that will cause a much larger volume of MQTT messaging each time your flows are restarted._\n\n# Dependency\n\n[node-red-contrib-sse-client](https://flows.nodered.org/node/node-red-contrib-sse-client)\n\n# Configuration\n\nA separate subflow instance can be created for each Hue bridge by using the following configuration variables:\n\n| Environment Variable | Description                                                             |\n|----------------------|-------------------------------------------------------------------------|\n| `ADDRESS`            | IP address of the Hue bridge                                            |\n| `KEY`                | \"Client key\" for the Hue bridge API<sup>*</sup>                         |\n| `TOPIC`              | String to prepend to each `msg.topic` in the output, as described below |\n\n<sup>*</sup>_See <https://developers.meethue.com/develop/hue-api-v2/getting-started/> for details. Use the_ Create Hue Access Token _subflow to obtain such a key._\n\n# Input\n\nResponse from a successful call to the `/resource` end-point of the [Philips Hue Bridge V2 API](https://developers.meethue.com/develop/hue-api-v2/api-reference/#resource) in `msg.payload`.\n\n# Output\n\nAn ongoing sequence of message objects representing the state of each device as reported by [SSE](https://developers.meethue.com/develop/hue-api-v2/core-concepts/#events). Each message will have the following properties set:\n\n| Property | Value |\n|-|-|\n| `msg.topic` | `${TOPIC}/<type>/<id>` where `<type>` and `<id>` are the identifiers for a given \"resource\" as reported by the Hue bridge API. |\n| `msg.qos` | 2 |\n| `msg.retain` | `true` |\n| `msg.payload` | The current state of the given \"resource\"<sup>**</sup> |\n\n<sup>**</sup>_Note that each output message will contain a combined set of properties for each \"resource\" received across multiple API responses and SSE messages. This mitigates one of the many issues with the design of the Philips Hue API. The cached state is maintained in flow context at runtime and as retained MQTT messages across reboots._",
        "category": "hue",
        "in": [],
        "out": [
            {
                "x": 1250,
                "y": 140,
                "wires": [
                    {
                        "id": "7972bbcf134f786b",
                        "port": 0
                    },
                    {
                        "id": "f3d6eb631a33249c",
                        "port": 0
                    },
                    {
                        "id": "1bf87f4377d87af1",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "ADDRESS",
                "type": "env",
                "value": "ADDRESS"
            },
            {
                "name": "KEY",
                "type": "env",
                "value": "KEY"
            },
            {
                "name": "TOPIC",
                "type": "env",
                "value": "TOPIC"
            }
        ],
        "meta": {
            "module": "@parasaurolophus/node-red-hue-to-mqtt",
            "type": "hue-to-mqtt",
            "version": "1.0.0",
            "author": "parasaurolophus <apps@rader.us>",
            "desc": "Forward SSE events arising from the Hue Bridge API to MQTT",
            "keywords": "philips,hue,sse",
            "license": "MIT"
        },
        "color": "#AA77AA",
        "outputLabels": [
            "mqtt",
            "metadata",
            "options"
        ],
        "icon": "font-awesome/fa-lightbulb-o",
        "status": {
            "x": 780,
            "y": 340,
            "wires": [
                {
                    "id": "35fad88b119f8f36",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "de620fed3bdb7aa9",
        "type": "subflow",
        "name": "Server-Side Events",
        "info": "",
        "category": "waubesa",
        "in": [
            {
                "x": 660,
                "y": 80,
                "wires": [
                    {
                        "id": "eef1022d50fc9776"
                    },
                    {
                        "id": "df7f3018ef95e2a2"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1220,
                "y": 40,
                "wires": [
                    {
                        "id": "cdd12e98966ee7c4",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1240,
                "y": 160,
                "wires": [
                    {
                        "id": "cdd12e98966ee7c4",
                        "port": 1
                    }
                ]
            },
            {
                "x": 1240,
                "y": 220,
                "wires": [
                    {
                        "id": "cdd12e98966ee7c4",
                        "port": 2
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "TIMEOUT",
                "type": "num",
                "value": "60000"
            }
        ],
        "meta": {
            "module": "@parasaurolophus/node-red-server-side-events",
            "type": "server-side-events",
            "version": "1.0.0",
            "author": "parasaurolophus <apps@rader.us>",
            "desc": "Add watchdog timer to @parasaurolophus/node-red-eventsource",
            "keywords": "sse,eventsource",
            "license": "MIT"
        },
        "color": "#E7E7AE",
        "outputLabels": [
            "sse",
            "onopen",
            "onerror"
        ],
        "icon": "node-red/white-globe.svg",
        "status": {
            "x": 200,
            "y": 280,
            "wires": [
                {
                    "id": "d901234fd1fce55c",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "4b1f9e8c23fa098d",
        "type": "subflow",
        "name": "Parse Hue Event",
        "info": "",
        "category": "hue",
        "in": [
            {
                "x": 60,
                "y": 100,
                "wires": [
                    {
                        "id": "11642f950d52a63f"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 900,
                "y": 60,
                "wires": [
                    {
                        "id": "c4f2d5d0acdf4cc1",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {
            "module": "@parasaurolophus/node-red-parse-hue-event",
            "type": "parse-hue-event",
            "version": "1.0.0",
            "author": "parasaurolophus <apps@rader.us>",
            "desc": "Parse a raw Philips Hue bridge server-sent event",
            "keywords": "philips,hue,sse",
            "license": "MIT"
        },
        "color": "#AA77AA",
        "inputLabels": [
            "raw sse"
        ],
        "outputLabels": [
            "hue event"
        ],
        "icon": "font-awesome/fa-lightbulb-o",
        "status": {
            "x": 1040,
            "y": 140,
            "wires": [
                {
                    "id": "612b03cff3e03da9",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "9601cbf2386d897b",
        "type": "subflow",
        "name": "Count Messages",
        "info": "",
        "category": "waubesa",
        "in": [],
        "out": [
            {
                "x": 730,
                "y": 60,
                "wires": [
                    {
                        "id": "29db695f97cc5757",
                        "port": 0
                    }
                ]
            },
            {
                "x": 730,
                "y": 140,
                "wires": [
                    {
                        "id": "29db695f97cc5757",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "TOPIC",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {
            "module": "@parasaurolophus/node-red-count-messages",
            "type": "count-messages",
            "version": "1.0.0",
            "author": "parasaurolophus <apps@rader.us>",
            "desc": "Count the number of MQTT messages received on a specfied topic",
            "keywords": "mqtt",
            "license": "MIT"
        },
        "color": "#DDAA99",
        "outputLabels": [
            "msg",
            "count"
        ],
        "status": {
            "x": 760,
            "y": 260,
            "wires": [
                {
                    "id": "b48a863d01a8dadf",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "be201d7a24b331c5",
        "type": "subflow",
        "name": "As Time",
        "info": "",
        "category": "waubesa",
        "in": [],
        "out": [
            {
                "x": 440,
                "y": 40,
                "wires": [
                    {
                        "id": "a96e0b1ad753faa2",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "TOPIC",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {
            "module": "@parasaurolophus/node-red-as-time",
            "type": "as-time",
            "version": "1.0.0",
            "author": "parasaurolophus <apps@rader.us>",
            "desc": "Format the payload as a local time string",
            "keywords": "utility,automation",
            "license": "MIT"
        },
        "color": "#DDAA99",
        "status": {
            "x": 620,
            "y": 120,
            "wires": [
                {
                    "id": "644bea96363a82cd",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "bdefba026bd44159",
        "type": "subflow",
        "name": "Get All PowerView Metadata",
        "info": "",
        "category": "powerview",
        "in": [
            {
                "x": 60,
                "y": 60,
                "wires": [
                    {
                        "id": "e3ada32cfe945566"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1340,
                "y": 60,
                "wires": [
                    {
                        "id": "18b035d175d78813",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "ADDRESS",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {
            "module": "@parasaurolophus/node-red-get-all-powerview-metadata",
            "type": "get-all-powerview-metadata",
            "version": "1.0.0",
            "author": "parasaurolophus <apps@rader.us>",
            "desc": "Get the metadata from a PowerView hub to drive dynamic dashboard controls",
            "keywords": "hunter-douglas,powerview",
            "license": "MIT"
        },
        "color": "#C0DEED",
        "icon": "font-awesome/fa-align-justify"
    },
    {
        "id": "9781b266d05451d0",
        "type": "subflow",
        "name": "Format Hue Metadata",
        "info": "",
        "category": "hue",
        "in": [
            {
                "x": 60,
                "y": 60,
                "wires": [
                    {
                        "id": "218dc34dad5f91fc"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 400,
                "y": 60,
                "wires": [
                    {
                        "id": "218dc34dad5f91fc",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {
            "module": "@parasaurolophus/node-red-format-hue-metadata",
            "type": "format-hue-metadata",
            "version": "1.0.0",
            "author": "parasaurolophus <apps@rader.us>",
            "desc": "Reformat Hue metadata for use by UI template control",
            "keywords": "philips,hue",
            "license": "MIT"
        },
        "color": "#AA77AA",
        "inputLabels": [
            "api response"
        ],
        "outputLabels": [
            "formatted for ui"
        ],
        "icon": "font-awesome/fa-lightbulb-o"
    },
    {
        "id": "87285e6bf01cff03",
        "type": "group",
        "z": "1cf0490e7de2f93d",
        "name": "Activate PowerView scene",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "2f6cc09457939ce2",
            "7173aa38c9fa93dc",
            "618e79a58ab8143a"
        ],
        "x": 114,
        "y": 179,
        "w": 362,
        "h": 82
    },
    {
        "id": "0770b0ba393f379d",
        "type": "group",
        "z": "1cf0490e7de2f93d",
        "name": "close all shades",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "71f42f61777d49d9",
            "af010737ecd1f8d6",
            "edec482fa879717d",
            "16c6de044f949382",
            "63e50cac1b5a1b97"
        ],
        "x": 114,
        "y": 279,
        "w": 1052,
        "h": 82
    },
    {
        "id": "746733f8c81b5ccd",
        "type": "group",
        "z": "1cf0490e7de2f93d",
        "name": "open all shades",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "4d9c62d6c2145813",
            "1b984be8838e6815",
            "1b49d418ac1d553d",
            "4f656e2b5766e68f",
            "5fc5b24cd49e520e"
        ],
        "x": 114,
        "y": 379,
        "w": 1052,
        "h": 82
    },
    {
        "id": "e961376bbef01556",
        "type": "group",
        "z": "1cf0490e7de2f93d",
        "name": "open east shades, close west shades",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "3fa2af1c1f32f8ee",
            "407f68edfd369a25",
            "59f2f3b92b79087e",
            "1fcfbbdf6167f8c8",
            "86ad8ea7914b5e27"
        ],
        "x": 114,
        "y": 479,
        "w": 1052,
        "h": 82
    },
    {
        "id": "56e03f40c1727182",
        "type": "group",
        "z": "1cf0490e7de2f93d",
        "name": "close east shades, open west shades",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "cab89ebfeca22623",
            "c906095c1f350eda",
            "e8a3ad681677753f",
            "a0e918936b64e067",
            "ea99355e0449d9ea"
        ],
        "x": 114,
        "y": 579,
        "w": 1052,
        "h": 82
    },
    {
        "id": "98cf3b8910bc4f22",
        "type": "group",
        "z": "cbd68ba9caa96a3d",
        "name": "Trigger automation on receipt of time events",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "485df563c6545698",
            "98e07825f41a09a2",
            "1b5ab2bf7ea37b3b",
            "1e6ace60764fec35",
            "784c9929fe789981",
            "6272a0d1ddf8807b",
            "2a94995efda1937e",
            "6b40e38fa169c721",
            "00b200c8b96373d9",
            "56ed153e71b59e89",
            "a9ea7694289d75de",
            "a01e15ec8fb87e05",
            "df682692b16a598e"
        ],
        "x": 14,
        "y": 279,
        "w": 1002,
        "h": 262
    },
    {
        "id": "8a031cfeade40a06",
        "type": "group",
        "z": "cbd68ba9caa96a3d",
        "name": "Fire timer events",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "b2c19560f9da088a",
            "a0c7d328b5287989",
            "8c6c3c20f5958599",
            "a0b61336a93a4089",
            "c9d02aeed7d0407f",
            "d534f07cf7c1eb0b",
            "b709b48ce2961f8e",
            "47875e1be48bbf82",
            "4b2e5cdaca43a71b",
            "dcae4a0dbbe2575e"
        ],
        "x": 14,
        "y": 79,
        "w": 1002,
        "h": 182
    },
    {
        "id": "b438e0cbd64ef6ce",
        "type": "group",
        "z": "b12fd38c090c51f2",
        "name": "Display a chart of daytime sun positions on a given date",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "c27168b168847790",
            "3a39c550369bac31",
            "15ce56cf1449ce52",
            "f33b94d2cc59c348",
            "f72b11239792afcf",
            "4dd293c16815dce3",
            "8fe5e01fe99f5026",
            "e7bc056a5ca25bc5",
            "f9a4b2c24da44638",
            "eb296b561972b772"
        ],
        "x": 14,
        "y": 119,
        "w": 1072,
        "h": 162
    },
    {
        "id": "8a81267cb12384d5",
        "type": "group",
        "z": "b12fd38c090c51f2",
        "name": "Monitor timer events",
        "style": {
            "label": true,
            "color": "#000000",
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1"
        },
        "nodes": [
            "3ffae20118b3f324",
            "056b4e63ec2cd405",
            "64f954fed4bbe73e",
            "4332d4706a43e2f6",
            "9e522923ebcadd47",
            "cd359e0f643d8b52",
            "6ce0fae7a630111f",
            "6fd30861ee594f7a",
            "7b3880a941748a69",
            "a6c27a31c49422e4",
            "03b32d05f0dc98c7",
            "3a0d9afd6a91a4b8",
            "119dc5e83c2a078f",
            "b403745b92a95d79",
            "c6ad3ce00565e461",
            "fb5206dc8bb107e5",
            "61c5be84a6996eee",
            "a921a5a41ab154fc"
        ],
        "x": 14,
        "y": 299,
        "w": 1232,
        "h": 202
    },
    {
        "id": "70e9b8db12799d18",
        "type": "group",
        "z": "c7141ffb22d64190",
        "name": "Send requests to the ground floor Hue bridge",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "14e5342cb50f366f",
            "7df3e5fbd6e9aa8a",
            "3b5ab296575b53d4"
        ],
        "x": 994,
        "y": 19,
        "w": 342,
        "h": 82
    },
    {
        "id": "290b83ef8e01ae0f",
        "type": "group",
        "z": "c7141ffb22d64190",
        "name": "Use within 30 seconds of pressing link button on the Hue bridge",
        "style": {
            "fill-opacity": "0.11",
            "label": true,
            "color": "#000000",
            "stroke": "none",
            "fill": "#000000"
        },
        "nodes": [
            "51bce99c75aa12c6",
            "f3ab10cd192709b0",
            "73a1ec5ed8ebc167",
            "edd68fdd0863619a"
        ],
        "x": 14,
        "y": 239,
        "w": 732,
        "h": 122
    },
    {
        "id": "cde8d276df445e2f",
        "type": "group",
        "z": "810a8b527afd2b1b",
        "name": "Send requests to the basement Hue bridge",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "735f828714a9c98f",
            "64274eb0d8b9e5dd",
            "33b523d447c86f23"
        ],
        "x": 994,
        "y": 19,
        "w": 342,
        "h": 82
    },
    {
        "id": "e7188f251e14aea1",
        "type": "group",
        "z": "810a8b527afd2b1b",
        "name": "Use within 30 seconds of pressing link button on the Hue bridge",
        "style": {
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000",
            "stroke": "none",
            "fill": "#000000"
        },
        "nodes": [
            "608e6356fbb9f384",
            "26973bac8c6a9dba",
            "a12bdbda86868f06",
            "bddbce9f11c0ea01"
        ],
        "x": 14,
        "y": 239,
        "w": 752,
        "h": 122
    },
    {
        "id": "f8dce80b21d7f706",
        "type": "group",
        "z": "c7141ffb22d64190",
        "name": "Yard",
        "style": {
            "stroke": "none",
            "stroke-opacity": "0.1",
            "label": true,
            "color": "#000000",
            "fill": "#000000",
            "fill-opacity": "0.1"
        },
        "nodes": [
            "2bb38044a932fa69",
            "64a68d2a2d2e93cd",
            "7f619f84fcad1d75",
            "4b146e0f1b9bcccb",
            "b11c745f6ce17117",
            "7e843abc77537f92",
            "a80f7d1788543bf0",
            "510f4653645e17d0",
            "67013f62ca5bcb43",
            "d43f117e07910821",
            "feaf54e6c16337c1",
            "d92030613c5ce50e",
            "52d3dd927cb7e37e",
            "cb0bc87b9e465a2f",
            "da79b96d161e1c28"
        ],
        "x": 774,
        "y": 419,
        "w": 472,
        "h": 322
    },
    {
        "id": "f718c99bbc8e36c9",
        "type": "group",
        "z": "c7141ffb22d64190",
        "name": "Main Floor",
        "style": {
            "stroke": "none",
            "stroke-opacity": "0.1",
            "label": true,
            "color": "#000000",
            "fill": "#000000",
            "fill-opacity": "0.1"
        },
        "nodes": [
            "52f0cba3f9b87632",
            "72acc2a8bcbc1528",
            "a3fa25812dc1f4c0",
            "0acba8178934baa1",
            "37e508aaad9b809e",
            "1c5888bd24d0a311",
            "fe5fdd858e8b907d",
            "dce6b6fd885e2956",
            "64afce8ff0b75f48"
        ],
        "x": 114,
        "y": 379,
        "w": 472,
        "h": 202
    },
    {
        "id": "f848d645bd1abc5b",
        "type": "group",
        "z": "c7141ffb22d64190",
        "name": "Main Bathroom",
        "style": {
            "stroke": "none",
            "stroke-opacity": "0.1",
            "label": true,
            "color": "#000000",
            "fill": "#000000",
            "fill-opacity": "0.1"
        },
        "nodes": [
            "df41f3a116d28de2",
            "a122f1a4fc3399e5",
            "12b6bc8a0257750a",
            "200e1af02e26479b",
            "012902774c9657f1",
            "90cec6147a7de28f"
        ],
        "x": 114,
        "y": 599,
        "w": 472,
        "h": 142
    },
    {
        "id": "b48f76e13fc77aa7",
        "type": "group",
        "z": "1cf0490e7de2f93d",
        "name": "Dynamically create dashboard controls for window shades based on metadata obtained from PowerView hub",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "85c26fe91dc71759",
            "175aa8cd2233a871",
            "75bff418d99b8d56",
            "7026f2de142e8ef2",
            "942f0a1ef3d8ade3"
        ],
        "x": 114,
        "y": 79,
        "w": 1212,
        "h": 82
    },
    {
        "id": "431ae4bdb7346af5",
        "type": "group",
        "z": "c7141ffb22d64190",
        "name": "Dynamically create dashboard controls for lighting based on metadata obtained from a Hue bridge",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "3324951b765c9f12",
            "2736286441feda07",
            "7def18ac26259af3",
            "abb71db57910be2f",
            "1ee8aff15eae874f",
            "8c9d79d2791e9b02",
            "988cc7effd5a036f"
        ],
        "x": 14,
        "y": 79,
        "w": 912,
        "h": 142
    },
    {
        "id": "4e52881346c9e44b",
        "type": "group",
        "z": "810a8b527afd2b1b",
        "name": "Dynamically create dashboard controls for lighting based on metadata obtained from a Hue bridge",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "80384d1e957ed3ca",
            "a28b1c17c4f3e3ee",
            "678145510dc4c76f",
            "d638e45951bb8819",
            "a2e5d0064800b5fb",
            "5c8d9ca80254e11c",
            "250b8a9cbab3774e"
        ],
        "x": 14,
        "y": 79,
        "w": 892,
        "h": 142
    },
    {
        "id": "4b0f721c48fca435",
        "type": "group",
        "z": "b12fd38c090c51f2",
        "name": "sun-positions CSV service",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "8b169767a6b4cbd9",
            "dbca9a86d3bcf1ec",
            "f33c29023f26968a",
            "8d0db05f4d495979",
            "ba54b4d206406127",
            "b1ebe60c0c09e6c1"
        ],
        "x": 14,
        "y": 19,
        "w": 1012,
        "h": 82
    },
    {
        "id": "599f55425211e232",
        "type": "group",
        "z": "810a8b527afd2b1b",
        "name": "Subscribe to server-sent events",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "7dcd1d246a096330",
            "968fd6d85ac60a62"
        ],
        "x": 994,
        "y": 119,
        "w": 242,
        "h": 82
    },
    {
        "id": "b0f5ce3a323b7dd7",
        "type": "group",
        "z": "c7141ffb22d64190",
        "name": "Subscribe to server-sent events",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "7d283a2fc0d30093",
            "54bbaac5bafb7512"
        ],
        "x": 994,
        "y": 119,
        "w": 242,
        "h": 82
    },
    {
        "id": "78e09083a861e13e",
        "type": "group",
        "z": "ff0141ba0f0c7234",
        "name": "Window shade automation",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "65ab6145dd1c2e19",
            "b13e36ae61e678c5",
            "92c2876f08baadd9",
            "55f89a635c93f337",
            "5638c682e2ac2fba",
            "5a10fc701135b50d",
            "ea959d418216fe68",
            "6d664c1fce229c1e"
        ],
        "x": 854,
        "y": 319,
        "w": 352,
        "h": 282
    },
    {
        "id": "053656a9e6f3379c",
        "type": "group",
        "z": "ff0141ba0f0c7234",
        "name": "Lighting automation",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "59e320abec722230",
            "52a74204d47efd1e",
            "6957440564321846",
            "9b05a84bf2e36872",
            "6051debe54e3825e",
            "13ec2fe1e16094a1",
            "84118b9049ec3439",
            "4bb92f343cc9a859",
            "34385092a355cd47",
            "06e95c81925fd3c3",
            "8a9ced356d9b863b"
        ],
        "x": 134,
        "y": 319,
        "w": 562,
        "h": 282
    },
    {
        "id": "276fb48c5a5f5cf0",
        "type": "group",
        "z": "ff0141ba0f0c7234",
        "name": "Limit rate at which messages are sent to the MQTT broker",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "74f456c57bd0405f",
            "3db511b8fbb93369",
            "efbd1b79e54e0bf7",
            "d935f691d63e1e77",
            "ec3b19f7f91f026d",
            "1a9f2ae66bc3b97b",
            "c985b6125c7dee4a",
            "3a71b6d844f7acb7",
            "4f8791884f618315",
            "af1881c6e1166196"
        ],
        "x": 134,
        "y": 79,
        "w": 652,
        "h": 222
    },
    {
        "id": "7a60f981743e0c00",
        "type": "group",
        "z": "c7141ffb22d64190",
        "name": "Monitor ground floor Hue readyState",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "f824597938fe8446",
            "362e8e438951f6f5",
            "b016ab17f51ffdc7",
            "ed8b62a9f546bb94"
        ],
        "x": 774,
        "y": 239,
        "w": 612,
        "h": 142
    },
    {
        "id": "1654aea0ccd3a289",
        "type": "group",
        "z": "810a8b527afd2b1b",
        "name": "Monitor Basement Hue readyState",
        "style": {
            "stroke": "none",
            "fill": "#000000",
            "fill-opacity": "0.1",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "02ea0683c75f69c5",
            "70078a31791fbbc5",
            "b419f6a87901aa7d",
            "c87b61478949025d"
        ],
        "x": 794,
        "y": 239,
        "w": 572,
        "h": 142
    },
    {
        "id": "e79e0110c2317edb",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "63c00f105cc3255f",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#9929bd",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#9929bd",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#9929bd",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#bb58db",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#9929bd",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Waubesa",
            "hideToolbar": "false",
            "allowSwipe": "true",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "MM/DD/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "722d62f3b93039c3",
        "type": "mqtt-broker",
        "name": "",
        "broker": "broker.local",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "ec4d94df679f3b11",
        "type": "ui_tab",
        "name": "Automation",
        "icon": "fa-clock-o",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "25c7f0078ed443dd",
        "type": "ui_group",
        "name": "Time",
        "tab": "ec4d94df679f3b11",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "03b0e40844d33477",
        "type": "ui_group",
        "name": "Ground Floor Hue",
        "tab": "ec4d94df679f3b11",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "a0da6d89d75fc6ac",
        "type": "ui_group",
        "name": "Basement Hue",
        "tab": "ec4d94df679f3b11",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "8055574ccb17e8ed",
        "type": "ui_group",
        "name": "Sun Position",
        "tab": "ec4d94df679f3b11",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "791bf5d34d06adaf",
        "type": "ui_tab",
        "name": "Controls",
        "icon": "fa-home",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "21f11f110d626f5a",
        "type": "ui_group",
        "name": "Ground Floor Lighting",
        "tab": "791bf5d34d06adaf",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "e3fcd4654cf9f3fc",
        "type": "ui_group",
        "name": "Window Shades",
        "tab": "791bf5d34d06adaf",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "178c0c0ade9cbfc5",
        "type": "ui_group",
        "name": "Basement Lighting",
        "tab": "791bf5d34d06adaf",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "d198490f207c2a62",
        "type": "ui_group",
        "name": "MQTT Broker",
        "tab": "ec4d94df679f3b11",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "c9c806d81ab63ac4",
        "type": "delay",
        "z": "5785c8d9f39df67e",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 170,
        "y": 60,
        "wires": [
            [
                "fa870f94fa1ea10b"
            ]
        ]
    },
    {
        "id": "fa870f94fa1ea10b",
        "type": "change",
        "z": "5785c8d9f39df67e",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "{\"hue-application-key\": $env('KEY')}",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "'https://' & $env('ADDRESS') & '/clip/v2/' & topic",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 60,
        "wires": [
            [
                "20ac42d7649c260a"
            ]
        ]
    },
    {
        "id": "20ac42d7649c260a",
        "type": "http request",
        "z": "5785c8d9f39df67e",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "e79e0110c2317edb",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 510,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "1e35b6e766e6b3d1",
        "type": "status",
        "z": "5785c8d9f39df67e",
        "name": "",
        "scope": [
            "c9c806d81ab63ac4"
        ],
        "x": 520,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "e4718ecfdb248cc7",
        "type": "http request",
        "z": "75bc72a16c4da2c8",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "e79e0110c2317edb",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 330,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "7316ae1eef4c6295",
        "type": "change",
        "z": "75bc72a16c4da2c8",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"devicetype\":$env('USERNAME'),\"generateclientkey\":true}",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "'https://' & $env('ADDRESS') & '/api'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 160,
        "y": 40,
        "wires": [
            [
                "e4718ecfdb248cc7"
            ]
        ]
    },
    {
        "id": "64ad1b43047cb836",
        "type": "status",
        "z": "75bc72a16c4da2c8",
        "name": "",
        "scope": [
            "e4718ecfdb248cc7"
        ],
        "x": 340,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "cd442f62fd059172",
        "type": "change",
        "z": "9c4e4702e4660adf",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "'http://' & $env('ADDRESS') & '/api/scenes?sceneId=' & payload",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 330,
        "y": 60,
        "wires": [
            [
                "8dc3bcf508fc6c98"
            ]
        ]
    },
    {
        "id": "8dc3bcf508fc6c98",
        "type": "http request",
        "z": "9c4e4702e4660adf",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 490,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "728ab503eb1eb941",
        "type": "status",
        "z": "9c4e4702e4660adf",
        "name": "",
        "scope": [
            "dcd553804e687131"
        ],
        "x": 500,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "dcd553804e687131",
        "type": "delay",
        "z": "9c4e4702e4660adf",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 170,
        "y": 60,
        "wires": [
            [
                "cd442f62fd059172"
            ]
        ]
    },
    {
        "id": "465f820637e0f695",
        "type": "change",
        "z": "4920eed654c67f8d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "'http://' & $env('ADDRESS') & '/api/' & topic & '/'",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 170,
        "y": 100,
        "wires": [
            [
                "e62fe5c7c72b90ee"
            ]
        ]
    },
    {
        "id": "e62fe5c7c72b90ee",
        "type": "http request",
        "z": "4920eed654c67f8d",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 330,
        "y": 100,
        "wires": [
            [
                "35c708b92ea8024b"
            ]
        ]
    },
    {
        "id": "014121091f945d16",
        "type": "status",
        "z": "4920eed654c67f8d",
        "name": "",
        "scope": [
            "e62fe5c7c72b90ee"
        ],
        "x": 540,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "35c708b92ea8024b",
        "type": "change",
        "z": "4920eed654c67f8d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"text\":statusCode,\"shape\":\"dot\",\"fill\":(statusCode = 200 ? \"green\" : (statusCode < 200 or statusCode > 299 ? \"red\": \"yellow\"))}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "7972bbcf134f786b",
        "type": "function",
        "z": "4e89e7c952d56c09",
        "name": "updateState",
        "func": "node.status({\n    text: msg.topic + ' ' + msg.payload.type,\n    shape: 'dot',\n    fill: 'blue'\n})\n\nconst state = flow.get('state') || {}\nconst type = state[msg.payload.type] || {}\nconst resource = type[msg.payload.id] || {}\n\nfor (const attribute in msg.payload) {\n\n    resource[attribute] = msg.payload[attribute]\n\n}\n\ntype[resource.id] = resource\nstate[resource.type] = type\nflow.set('state', state)\n\nmsg.topic = env.get('TOPIC') + '/' + resource.type + '/' + resource.id\nmsg.qos = 2\nmsg.retain = true\nmsg.payload = resource\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "74ccf37d5b5cc460",
        "type": "switch",
        "z": "4e89e7c952d56c09",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "jsonata_exp",
                "v": "topic = 'add' or topic = 'update'",
                "vt": "jsonata"
            },
            {
                "t": "eq",
                "v": "delete",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 890,
        "y": 100,
        "wires": [
            [
                "7972bbcf134f786b"
            ],
            [
                "f3d6eb631a33249c"
            ]
        ]
    },
    {
        "id": "f3d6eb631a33249c",
        "type": "function",
        "z": "4e89e7c952d56c09",
        "name": "deleteState",
        "func": "node.status({\n    text: msg.topic + ' ' + msg.payload.type,\n    shape: 'dot',\n    fill: 'blue'\n})\n\nconst state = flow.get('state') || {}\n\nif (Object.prototype.hasOwnProperty.call(state, msg.payload.type)) {\n\n    const type = state[msg.payload.type]\n\n    if (Object.prototype.hasOwnProperty.call(type, msg.payload.id)) {\n\n        delete type[msg.payload.id]\n\n    }\n\n}\n\nflow.set('state', state)\n\nmsg.topic = env.get('TOPIC') + '/' + msg.payload.type + '/' + msg.payload.id\nmsg.qos = 2\nmsg.retain = true\nmsg.payload = ''\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "35fad88b119f8f36",
        "type": "status",
        "z": "4e89e7c952d56c09",
        "name": "",
        "scope": [
            "b3c5813303ac7896"
        ],
        "x": 660,
        "y": 300,
        "wires": [
            [
                "9827fd9dee4289ac"
            ]
        ]
    },
    {
        "id": "b3c5813303ac7896",
        "type": "subflow:de620fed3bdb7aa9",
        "z": "4e89e7c952d56c09",
        "name": "",
        "x": 470,
        "y": 200,
        "wires": [
            [
                "c51e9f68572dcd4f"
            ],
            [
                "1bf87f4377d87af1"
            ],
            [
                "1bf87f4377d87af1"
            ]
        ]
    },
    {
        "id": "c51e9f68572dcd4f",
        "type": "subflow:4b1f9e8c23fa098d",
        "z": "4e89e7c952d56c09",
        "name": "",
        "x": 730,
        "y": 100,
        "wires": [
            [
                "74ccf37d5b5cc460"
            ]
        ]
    },
    {
        "id": "42539f9217e51fbd",
        "type": "change",
        "z": "4e89e7c952d56c09",
        "name": "hue parameters",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"url\":\"https://\" & $env('ADDRESS') & \"/eventstream/clip/v2\",\"initDict\":{\"withCredentials\":false,\"https\":{\"rejectUnauthorized\":false},\"headers\":{\"hue-application-key\":$env('KEY')}}}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 200,
        "wires": [
            [
                "b3c5813303ac7896"
            ]
        ]
    },
    {
        "id": "1bf87f4377d87af1",
        "type": "change",
        "z": "4e89e7c952d56c09",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "$env('TOPIC') & '/' & topic",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "qos",
                "pt": "msg",
                "to": "2",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "retain",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "9827fd9dee4289ac",
        "type": "change",
        "z": "4e89e7c952d56c09",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "status",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$number(status.text)",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 260,
        "wires": [
            [
                "1bf87f4377d87af1"
            ]
        ]
    },
    {
        "id": "d993f8d356c8b076",
        "type": "inject",
        "z": "4e89e7c952d56c09",
        "name": "at start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 200,
        "wires": [
            [
                "42539f9217e51fbd"
            ]
        ]
    },
    {
        "id": "cdd12e98966ee7c4",
        "type": "EventSource",
        "z": "de620fed3bdb7aa9",
        "name": "",
        "x": 1010,
        "y": 160,
        "wires": [
            [
                "0d59cdef0e0a6e85"
            ],
            [
                "0d59cdef0e0a6e85"
            ],
            [
                "10539047c783b994"
            ]
        ]
    },
    {
        "id": "eef1022d50fc9776",
        "type": "change",
        "z": "de620fed3bdb7aa9",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "parameters",
                "pt": "flow",
                "to": "payload",
                "tot": "msg",
                "dc": true
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 120,
        "wires": [
            [
                "cdd12e98966ee7c4"
            ]
        ]
    },
    {
        "id": "d901234fd1fce55c",
        "type": "status",
        "z": "de620fed3bdb7aa9",
        "name": "",
        "scope": [
            "cdd12e98966ee7c4"
        ],
        "x": 80,
        "y": 240,
        "wires": [
            [
                "fabe0aac918a0c99"
            ]
        ]
    },
    {
        "id": "fabe0aac918a0c99",
        "type": "switch",
        "z": "de620fed3bdb7aa9",
        "name": "readyState = 2?",
        "property": "status.text",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 260,
        "y": 200,
        "wires": [
            [
                "48fa5f1a9c9b1ec2"
            ],
            [
                "084266e8becbe572"
            ]
        ]
    },
    {
        "id": "c97d943953f14d84",
        "type": "trigger",
        "z": "de620fed3bdb7aa9",
        "name": "watchdog",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "date",
        "duration": "1",
        "extend": true,
        "overrideDelay": true,
        "units": "min",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 640,
        "y": 200,
        "wires": [
            [
                "ba3b9c14ec9f5691"
            ]
        ]
    },
    {
        "id": "084266e8becbe572",
        "type": "change",
        "z": "de620fed3bdb7aa9",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "reset",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 240,
        "wires": [
            [
                "c97d943953f14d84"
            ]
        ]
    },
    {
        "id": "0d59cdef0e0a6e85",
        "type": "link out",
        "z": "de620fed3bdb7aa9",
        "name": "watchdog",
        "mode": "link",
        "links": [
            "1d6da76cca173646"
        ],
        "x": 1195,
        "y": 100,
        "wires": []
    },
    {
        "id": "1d6da76cca173646",
        "type": "link in",
        "z": "de620fed3bdb7aa9",
        "name": "watchdog",
        "links": [
            "0d59cdef0e0a6e85"
        ],
        "x": 325,
        "y": 120,
        "wires": [
            [
                "48fa5f1a9c9b1ec2"
            ]
        ],
        "info": "// nrlint align-to-grid:off\n"
    },
    {
        "id": "3ba637cbe04def58",
        "type": "link in",
        "z": "de620fed3bdb7aa9",
        "name": "reset",
        "links": [
            "10539047c783b994",
            "df7f3018ef95e2a2"
        ],
        "x": 325,
        "y": 280,
        "wires": [
            [
                "084266e8becbe572"
            ]
        ],
        "info": "// nrlint align-to-grid:off\n"
    },
    {
        "id": "10539047c783b994",
        "type": "link out",
        "z": "de620fed3bdb7aa9",
        "name": "reset",
        "mode": "link",
        "links": [
            "3ba637cbe04def58"
        ],
        "x": 1195,
        "y": 280,
        "wires": []
    },
    {
        "id": "df7f3018ef95e2a2",
        "type": "link out",
        "z": "de620fed3bdb7aa9",
        "name": "reset",
        "mode": "link",
        "links": [
            "3ba637cbe04def58"
        ],
        "x": 735,
        "y": 40,
        "wires": []
    },
    {
        "id": "48fa5f1a9c9b1ec2",
        "type": "change",
        "z": "de620fed3bdb7aa9",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "delay",
                "pt": "msg",
                "to": "TIMEOUT",
                "tot": "env"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 160,
        "wires": [
            [
                "c97d943953f14d84"
            ]
        ]
    },
    {
        "id": "ba3b9c14ec9f5691",
        "type": "change",
        "z": "de620fed3bdb7aa9",
        "name": "get flow.parameters",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "parameters",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 200,
        "wires": [
            [
                "cdd12e98966ee7c4"
            ]
        ]
    },
    {
        "id": "11642f950d52a63f",
        "type": "change",
        "z": "4b1f9e8c23fa098d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.data",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 180,
        "y": 100,
        "wires": [
            [
                "d6816cf71b63c27e"
            ]
        ]
    },
    {
        "id": "d6816cf71b63c27e",
        "type": "json",
        "z": "4b1f9e8c23fa098d",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 330,
        "y": 100,
        "wires": [
            [
                "b4da061c0dd45c54"
            ]
        ]
    },
    {
        "id": "b4da061c0dd45c54",
        "type": "split",
        "z": "4b1f9e8c23fa098d",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 450,
        "y": 100,
        "wires": [
            [
                "94e9fe9a9f7af221"
            ]
        ]
    },
    {
        "id": "94e9fe9a9f7af221",
        "type": "change",
        "z": "4b1f9e8c23fa098d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "payload.type",
                "tot": "msg"
            },
            {
                "t": "move",
                "p": "payload.data",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 100,
        "wires": [
            [
                "c4f2d5d0acdf4cc1"
            ]
        ]
    },
    {
        "id": "c4f2d5d0acdf4cc1",
        "type": "split",
        "z": "4b1f9e8c23fa098d",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 750,
        "y": 100,
        "wires": [
            [
                "612b03cff3e03da9"
            ]
        ]
    },
    {
        "id": "612b03cff3e03da9",
        "type": "change",
        "z": "4b1f9e8c23fa098d",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"text\":payload.type,\"shape\":\"ring\",\"fill\":\"blue\"}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "3889cb8956554e6f",
        "type": "mqtt in",
        "z": "9601cbf2386d897b",
        "name": "",
        "topic": "${TOPIC}",
        "qos": "2",
        "datatype": "json",
        "broker": "722d62f3b93039c3",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 460,
        "y": 100,
        "wires": [
            [
                "29db695f97cc5757"
            ]
        ]
    },
    {
        "id": "29db695f97cc5757",
        "type": "function",
        "z": "9601cbf2386d897b",
        "name": "count",
        "func": "let count = context.get('count') || 0\n\ncount += 1\ncontext.set('count', count)\n\nnode.status({\n    fill: \"blue\",\n    shape: \"dot\",\n    text: count\n})\n\nreturn [\n    msg,\n    { payload: count }\n]",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 100,
        "wires": [
            [],
            []
        ],
        "outputLabels": [
            "msg",
            "count"
        ]
    },
    {
        "id": "3f4427884112393c",
        "type": "status",
        "z": "9601cbf2386d897b",
        "name": "count status",
        "scope": [
            "29db695f97cc5757"
        ],
        "x": 150,
        "y": 220,
        "wires": [
            [
                "c2f18976dc0cf414"
            ]
        ]
    },
    {
        "id": "c2f18976dc0cf414",
        "type": "change",
        "z": "9601cbf2386d897b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "status.text",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "count",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 220,
        "wires": [
            [
                "784dad3b4399f439"
            ]
        ]
    },
    {
        "id": "fd9cbbdd03dc328f",
        "type": "status",
        "z": "9601cbf2386d897b",
        "name": "connection status",
        "scope": [
            "3889cb8956554e6f"
        ],
        "x": 140,
        "y": 300,
        "wires": [
            [
                "eb2d985bad141a6c"
            ]
        ]
    },
    {
        "id": "eb2d985bad141a6c",
        "type": "change",
        "z": "9601cbf2386d897b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "status.text",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "connection",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 300,
        "wires": [
            [
                "784dad3b4399f439"
            ]
        ]
    },
    {
        "id": "784dad3b4399f439",
        "type": "join",
        "z": "9601cbf2386d897b",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 490,
        "y": 260,
        "wires": [
            [
                "b48a863d01a8dadf"
            ]
        ]
    },
    {
        "id": "b48a863d01a8dadf",
        "type": "change",
        "z": "9601cbf2386d897b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "status",
                "pt": "msg",
                "to": "{\t   \"text\": $substringAfter(payload.connection, 'node-red:common.status.') & ' | ' & payload.count,\t   \"shape\": \"dot\",\t   \"fill\": \"blue\"\t}",
                "tot": "jsonata"
            },
            {
                "t": "delete",
                "p": "payload",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "7f7ef86a4212cda9",
        "type": "mqtt in",
        "z": "be201d7a24b331c5",
        "name": "",
        "topic": "${TOPIC}",
        "qos": "2",
        "datatype": "json",
        "broker": "722d62f3b93039c3",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 80,
        "wires": [
            [
                "a96e0b1ad753faa2"
            ]
        ]
    },
    {
        "id": "a96e0b1ad753faa2",
        "type": "function",
        "z": "be201d7a24b331c5",
        "name": "formatTime",
        "func": "const date = new Date(msg.payload)\n\nmsg.payload = date.toLocaleTimeString()\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 80,
        "wires": [
            [
                "644bea96363a82cd"
            ]
        ]
    },
    {
        "id": "644bea96363a82cd",
        "type": "change",
        "z": "be201d7a24b331c5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"text\":payload,\"shape\":\"dot\",\"fill\":\"blue\"}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 500,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "18b035d175d78813",
        "type": "function",
        "z": "bdefba026bd44159",
        "name": "mergeMetadata",
        "func": "const scenes = msg.payload\n\n/**\n* @param {{ name: string; }} obj1\n* @param {{ name: any; }} obj2\n*/\nfunction nameCompare(obj1, obj2) {\n\n    return obj1.name.localeCompare(obj2.name)\n\n}\n\n/**\n* @param {any} roomId\n*/\nfunction findScenes(roomId) {\n\n    const selected = []\n\n    for (const scene of scenes) {\n\n        if (scene.roomId == roomId) {\n\n            selected.push({\n                id: scene.sceneId,\n                name: scene.sceneName\n            })\n        }\n    }\n\n    return selected.sort(nameCompare)\n\n}\n\n/**\n* @param {{ scenes: any[]; }} room\n*/\nfunction hasScenes(room) {\n\n    return room.scenes.length > 0\n\n}\n\nmsg.payload = msg.rooms.map((/** @type {{ id: any; name: any; }} */ room) => {\n\n    return {\n        id: room.id,\n        name: room.name,\n        scenes: findScenes(room.id)\n    }\n\n}).filter(hasScenes).sort(nameCompare)\n\nflow.set('$parent.metadata', msg.payload)\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "9d0fb43b1d0b583f",
        "type": "change",
        "z": "bdefba026bd44159",
        "name": "decode scene names",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$map(payload.sceneData, function($scene) {\t    {\t        \"sceneName\": $base64decode($scene.name),\t        \"sceneId\": $scene.id,\t        \"roomId\": $scene.roomId\t    }\t})",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1020,
        "y": 60,
        "wires": [
            [
                "18b035d175d78813"
            ]
        ]
    },
    {
        "id": "837774c682b93af9",
        "type": "subflow:4920eed654c67f8d",
        "z": "bdefba026bd44159",
        "name": "Get PowerVIew Scenes",
        "x": 790,
        "y": 60,
        "wires": [
            [
                "9d0fb43b1d0b583f"
            ]
        ]
    },
    {
        "id": "42529821fe2b55cd",
        "type": "change",
        "z": "bdefba026bd44159",
        "name": "decode room names",
        "rules": [
            {
                "t": "set",
                "p": "rooms",
                "pt": "msg",
                "to": "$map(payload.roomData, function($room) {\t    {\t        \"name\": $base64decode($room.name),\t        \"id\": $room.id\t    }\t})",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "scenes",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 60,
        "wires": [
            [
                "837774c682b93af9"
            ]
        ]
    },
    {
        "id": "4a774d5487ebaf6f",
        "type": "subflow:4920eed654c67f8d",
        "z": "bdefba026bd44159",
        "name": "Get PowerVIew Rooms",
        "x": 330,
        "y": 60,
        "wires": [
            [
                "42529821fe2b55cd"
            ]
        ]
    },
    {
        "id": "e3ada32cfe945566",
        "type": "change",
        "z": "bdefba026bd44159",
        "name": "rooms:",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "rooms",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 150,
        "y": 60,
        "wires": [
            [
                "4a774d5487ebaf6f"
            ]
        ]
    },
    {
        "id": "218dc34dad5f91fc",
        "type": "function",
        "z": "9781b266d05451d0",
        "name": "format hue metadata",
        "func": "/**\n* @param {any} groupId\n* @param {string} key\n* @param {any[]} resources\n*/\nfunction findReferences(groupId, key, resources) {\n\n    const references = []\n\n    resources.forEach(resource => {\n\n        if (resource[key].rid == groupId) {\n\n            references.push(resource)\n\n        }\n    })\n\n    return references\n\n}\n\n/**\n* @param {{ name: string; }} obj1\n* @param {{ name: any; }} obj2\n*/\nfunction nameCompare(obj1, obj2) {\n\n    return obj1.name.localeCompare(obj2.name)\n\n}\n\n/**\n* @param {{ metadata: { name: any; }; type: any; id: any; }} group\n* @param {{ scene?: any; grouped_light?: any; }} resources\n*/\nfunction getGroup(group, resources) {\n\n    const scenes = findReferences(group.id, 'group', resources.scene).map(scene => {\n\n        return {\n            name: scene.metadata.name,\n            id: scene.id\n        }\n    }).sort(nameCompare)\n\n    const grouped_light = findReferences(group.id, 'owner', resources.grouped_light)[0]\n\n    return {\n        name: group.metadata.name,\n        id: group.id,\n        type: group.type,\n        grouped_light: grouped_light.id,\n        scene: scenes\n    }\n}\n\nconst resources = {}\n\nmsg.payload.data.forEach((/** @type {{ type: string | number; }} */ resource) => {\n\n    const type = resources[resource.type] || []\n    type.push(resource)\n    resources[resource.type] = type\n\n})\n\nconst rooms = resources.room || []\nconst zones = resources.zone || []\n\nmsg.payload = {\n    room: rooms.map((/** @type {{ metadata: { name: any; }; type: any; id: any; }} */ room) => {\n        return getGroup(room, resources)\n    }).sort(nameCompare),\n    zone: zones.map((/** @type {{ metadata: { name: any; }; type: any; id: any; }} */ zone) => {\n        return getGroup(zone, resources)\n    }).sort(nameCompare)\n}\n\nflow.set('$parent.metadata', msg.payload)\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 60,
        "wires": [
            []
        ],
        "outputLabels": [
            "merged"
        ]
    },
    {
        "id": "485df563c6545698",
        "type": "join",
        "z": "cbd68ba9caa96a3d",
        "g": "98cf3b8910bc4f22",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 550,
        "y": 380,
        "wires": [
            [
                "98e07825f41a09a2"
            ]
        ]
    },
    {
        "id": "98e07825f41a09a2",
        "type": "rbe",
        "z": "cbd68ba9caa96a3d",
        "g": "98cf3b8910bc4f22",
        "name": "",
        "func": "rbei",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 670,
        "y": 380,
        "wires": [
            [
                "1b5ab2bf7ea37b3b"
            ]
        ]
    },
    {
        "id": "1b5ab2bf7ea37b3b",
        "type": "switch",
        "z": "cbd68ba9caa96a3d",
        "g": "98cf3b8910bc4f22",
        "name": "automation enabled?",
        "property": "payload.enable",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 840,
        "y": 380,
        "wires": [
            [
                "a9ea7694289d75de"
            ]
        ]
    },
    {
        "id": "1e6ace60764fec35",
        "type": "mqtt in",
        "z": "cbd68ba9caa96a3d",
        "g": "98cf3b8910bc4f22",
        "name": "",
        "topic": "nodered/automation/enable",
        "qos": "2",
        "datatype": "json",
        "broker": "722d62f3b93039c3",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 440,
        "wires": [
            [
                "784c9929fe789981",
                "6b40e38fa169c721"
            ]
        ]
    },
    {
        "id": "b2c19560f9da088a",
        "type": "function",
        "z": "cbd68ba9caa96a3d",
        "g": "8a031cfeade40a06",
        "name": "daily",
        "func": "/*global suncalc*/\n\nconst date = new Date()\n\n////////////////////////////////////////////////////////////////\n// sunrise, sunset\n\nconst latitude = env.get('LATITUDE')\nconst longitude = env.get('LONGITUDE')\nconst times = suncalc.getTimes(date, latitude, longitude)\nconst start = times.sunrise.getTime()\nconst end = times.sunset.getTime()\n\nconst payload = {\n    sunrise: start,\n    sunset: end,\n    zenith: {}\n}\n\n////////////////////////////////////////////////////////////////\n// midday, afternoon\n\nfor (let minute = start; minute < end; minute += 60000) {\n\n    const d = new Date(minute)\n    const current = payload.zenith.altitude || -100\n    const position = suncalc.getPosition(d, latitude, longitude)\n\n    if (position.altitude > current) {\n\n        payload.zenith = {\n            altitude: position.altitude,\n            azimuth: position.azimuth,\n            time: minute\n        }\n    }\n}\n\nconst offset = 7200000\npayload.midday = payload.zenith.time - offset\npayload.afternoon = payload.zenith.time + offset\n\n////////////////////////////////////////////////////////////////\n// bedtime\n\ndate.setHours(22, 0, 0, 0)\n\nconst bedtime = 1800000 - Math.floor(Math.random() * 3600000)\n\npayload.bedtime = bedtime + date.getTime()\n\nif (payload.bedtime < payload.sunset) {\n\n    payload.bedtime = payload.sunset + 1800000\n\n}\n\n////////////////////////////////////////////////////////////////\n// theme\n\nconst month = date.getMonth() + 1\nconst day = date.getDate()\n\nif (month == 7 && day <= 4) {\n\n    payload.theme = 'tribal'\n\n} else if (month == 10) {\n\n    payload.theme = 'spooky'\n\n} else if (month == 12) {\n\n    payload.theme = 'jolly'\n\n} else {\n\n    payload.theme = 'standard'\n\n}\n\n////////////////////////////////////////////////////////////////\n\nmsg.payload = payload\nmsg.topic = 'daily'\n\nnode.status({\n    text: new Date(msg.payload.bedtime).toLocaleTimeString(),\n    shape: 'dot',\n    fill: 'blue'\n})\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "suncalc",
                "module": "suncalc"
            }
        ],
        "x": 290,
        "y": 140,
        "wires": [
            [
                "c9d02aeed7d0407f"
            ]
        ]
    },
    {
        "id": "a0c7d328b5287989",
        "type": "inject",
        "z": "cbd68ba9caa96a3d",
        "g": "8a031cfeade40a06",
        "name": "at start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 120,
        "wires": [
            [
                "b2c19560f9da088a"
            ]
        ]
    },
    {
        "id": "8c6c3c20f5958599",
        "type": "inject",
        "z": "cbd68ba9caa96a3d",
        "g": "8a031cfeade40a06",
        "name": "every morning",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "00 04 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 160,
        "wires": [
            [
                "b2c19560f9da088a"
            ]
        ]
    },
    {
        "id": "a0b61336a93a4089",
        "type": "inject",
        "z": "cbd68ba9caa96a3d",
        "g": "8a031cfeade40a06",
        "name": "every minute",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "now",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 220,
        "wires": [
            [
                "c9d02aeed7d0407f"
            ]
        ]
    },
    {
        "id": "c9d02aeed7d0407f",
        "type": "join",
        "z": "cbd68ba9caa96a3d",
        "g": "8a031cfeade40a06",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 430,
        "y": 180,
        "wires": [
            [
                "d534f07cf7c1eb0b"
            ]
        ]
    },
    {
        "id": "d534f07cf7c1eb0b",
        "type": "function",
        "z": "cbd68ba9caa96a3d",
        "g": "8a031cfeade40a06",
        "name": "now",
        "func": "/*global suncalc*/\n\nconst date = new Date(msg.payload.now)\nconst latitude = env.get('LATITUDE')\nconst longitude = env.get('LONGITUDE')\nconst position = suncalc.getPosition(date, latitude, longitude)\n\nconst payload = {\n    now: msg.payload.now,\n    altitude: position.altitude,\n    azimuth: position.azimuth\n}\n\nfor (const key in msg.payload.daily) {\n\n    payload[key] = msg.payload.daily[key]\n\n}\n\nif (payload.now > payload.sunrise && payload.now < payload.bedtime) {\n\n    if (payload.now < payload.midday) {\n\n        payload.time = 'morning'\n\n    } else if (payload.now < payload.afternoon) {\n\n        payload.time = 'midday'\n\n    } else if (payload.now < payload.sunset) {\n\n        payload.time = 'afternoon'\n\n    } else {\n\n        payload.time = 'evening'\n\n    }\n\n} else {\n\n    payload.time = 'night'\n\n}\n\nnode.status({\n    text: payload.time,\n    shape: 'dot',\n    fill: 'blue'\n})\n\n/**\n* @param {string} topic\n* @param {{ [x: string]: any; now?: any; altitude?: any; azimuth?: any; }} payload\n* @param {{ topic: string; payload: any; qos: number; retain: boolean; }[]} msgs\n*/\nfunction splitPayload(topic, payload, msgs) {\n\n    for (const key in payload) {\n\n        const value = payload[key]\n\n        if ((typeof value) == 'object') {\n\n            msgs = msgs.concat(splitPayload(topic + key + '/', value, []))\n\n        } else {\n\n            msgs.push({\n                topic: topic + key,\n                payload: value\n            })\n        }\n    }\n\n    return msgs\n\n}\n\nconst msgs = splitPayload('', payload, [])\n\nreturn [msgs]",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "suncalc",
                "module": "suncalc"
            }
        ],
        "x": 550,
        "y": 180,
        "wires": [
            [
                "b709b48ce2961f8e"
            ]
        ]
    },
    {
        "id": "b709b48ce2961f8e",
        "type": "rbe",
        "z": "cbd68ba9caa96a3d",
        "g": "8a031cfeade40a06",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 670,
        "y": 180,
        "wires": [
            [
                "47875e1be48bbf82"
            ]
        ]
    },
    {
        "id": "47875e1be48bbf82",
        "type": "change",
        "z": "cbd68ba9caa96a3d",
        "g": "8a031cfeade40a06",
        "name": "set mqtt parameters",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "'nodered/automation/' & topic",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "qos",
                "pt": "msg",
                "to": "2",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "retain",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 180,
        "wires": [
            [
                "4b2e5cdaca43a71b"
            ]
        ]
    },
    {
        "id": "784c9929fe789981",
        "type": "change",
        "z": "cbd68ba9caa96a3d",
        "g": "98cf3b8910bc4f22",
        "name": "truncate topic",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "$substringAfter(topic, 'nodered/automation/')",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 380,
        "wires": [
            [
                "485df563c6545698"
            ]
        ]
    },
    {
        "id": "6272a0d1ddf8807b",
        "type": "mqtt in",
        "z": "cbd68ba9caa96a3d",
        "g": "98cf3b8910bc4f22",
        "name": "",
        "topic": "nodered/automation/time",
        "qos": "2",
        "datatype": "utf8",
        "broker": "722d62f3b93039c3",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 320,
        "wires": [
            [
                "784c9929fe789981"
            ]
        ]
    },
    {
        "id": "2a94995efda1937e",
        "type": "mqtt in",
        "z": "cbd68ba9caa96a3d",
        "g": "98cf3b8910bc4f22",
        "name": "",
        "topic": "nodered/automation/theme",
        "qos": "2",
        "datatype": "utf8",
        "broker": "722d62f3b93039c3",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 380,
        "wires": [
            [
                "784c9929fe789981"
            ]
        ]
    },
    {
        "id": "6b40e38fa169c721",
        "type": "ui_switch",
        "z": "cbd68ba9caa96a3d",
        "g": "98cf3b8910bc4f22",
        "name": "Enable Automation",
        "label": "Enable",
        "tooltip": "",
        "group": "25c7f0078ed443dd",
        "order": 12,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "nodered/automation/enable",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 410,
        "y": 500,
        "wires": [
            [
                "56ed153e71b59e89"
            ]
        ]
    },
    {
        "id": "4b2e5cdaca43a71b",
        "type": "link out",
        "z": "cbd68ba9caa96a3d",
        "g": "8a031cfeade40a06",
        "name": "send to broker",
        "mode": "link",
        "links": [
            "b9100b6a29fef164",
            "efbd1b79e54e0bf7"
        ],
        "x": 975,
        "y": 180,
        "wires": []
    },
    {
        "id": "00b200c8b96373d9",
        "type": "link out",
        "z": "cbd68ba9caa96a3d",
        "g": "98cf3b8910bc4f22",
        "name": "send to broker",
        "mode": "link",
        "links": [
            "b9100b6a29fef164",
            "efbd1b79e54e0bf7"
        ],
        "x": 755,
        "y": 500,
        "wires": []
    },
    {
        "id": "56ed153e71b59e89",
        "type": "change",
        "z": "cbd68ba9caa96a3d",
        "g": "98cf3b8910bc4f22",
        "name": "set mqtt parameters",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "nodered/automation/enable",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "qos",
                "pt": "msg",
                "to": "2",
                "tot": "num"
            },
            {
                "t": "set",
                "p": "retain",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 620,
        "y": 500,
        "wires": [
            [
                "00b200c8b96373d9"
            ]
        ]
    },
    {
        "id": "a9ea7694289d75de",
        "type": "link out",
        "z": "cbd68ba9caa96a3d",
        "g": "98cf3b8910bc4f22",
        "name": "time",
        "mode": "link",
        "links": [
            "d83eb703d52610ad",
            "ea959d418216fe68",
            "0d2088c48deebf62",
            "4bb92f343cc9a859"
        ],
        "x": 975,
        "y": 380,
        "wires": []
    },
    {
        "id": "dcae4a0dbbe2575e",
        "type": "comment",
        "z": "cbd68ba9caa96a3d",
        "g": "8a031cfeade40a06",
        "name": "send nodered/automation/+ events...",
        "info": "",
        "x": 840,
        "y": 140,
        "wires": []
    },
    {
        "id": "a01e15ec8fb87e05",
        "type": "comment",
        "z": "cbd68ba9caa96a3d",
        "g": "98cf3b8910bc4f22",
        "name": "execute automation...",
        "info": "",
        "x": 880,
        "y": 340,
        "wires": []
    },
    {
        "id": "df682692b16a598e",
        "type": "comment",
        "z": "cbd68ba9caa96a3d",
        "g": "98cf3b8910bc4f22",
        "name": "send nodered/automation/enable...",
        "info": "",
        "x": 620,
        "y": 460,
        "wires": []
    },
    {
        "id": "33cad5b58a607def",
        "type": "comment",
        "z": "cbd68ba9caa96a3d",
        "name": "view info tab for this flow for important configuration and usage documentation",
        "info": "",
        "x": 290,
        "y": 40,
        "wires": []
    },
    {
        "id": "65ab6145dd1c2e19",
        "type": "switch",
        "z": "ff0141ba0f0c7234",
        "g": "78e09083a861e13e",
        "name": "time",
        "property": "payload.time",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "morning",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "midday",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "afternoon",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "evening",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "night",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 5,
        "x": 990,
        "y": 440,
        "wires": [
            [
                "b13e36ae61e678c5"
            ],
            [
                "92c2876f08baadd9"
            ],
            [
                "55f89a635c93f337"
            ],
            [
                "5638c682e2ac2fba"
            ],
            [
                "5a10fc701135b50d"
            ]
        ],
        "inputLabels": [
            "suncalc"
        ],
        "outputLabels": [
            "morning",
            "midday",
            "afternoon",
            "evening",
            "night"
        ]
    },
    {
        "id": "b13e36ae61e678c5",
        "type": "link out",
        "z": "ff0141ba0f0c7234",
        "g": "78e09083a861e13e",
        "name": "morning",
        "mode": "link",
        "links": [
            "cab89ebfeca22623"
        ],
        "x": 1155,
        "y": 360,
        "wires": []
    },
    {
        "id": "92c2876f08baadd9",
        "type": "link out",
        "z": "ff0141ba0f0c7234",
        "g": "78e09083a861e13e",
        "name": "midday",
        "mode": "link",
        "links": [
            "4d9c62d6c2145813"
        ],
        "x": 1155,
        "y": 400,
        "wires": []
    },
    {
        "id": "55f89a635c93f337",
        "type": "link out",
        "z": "ff0141ba0f0c7234",
        "g": "78e09083a861e13e",
        "name": "afternoon",
        "mode": "link",
        "links": [
            "3fa2af1c1f32f8ee"
        ],
        "x": 1155,
        "y": 440,
        "wires": []
    },
    {
        "id": "5638c682e2ac2fba",
        "type": "link out",
        "z": "ff0141ba0f0c7234",
        "g": "78e09083a861e13e",
        "name": "evening",
        "mode": "link",
        "links": [
            "4d9c62d6c2145813"
        ],
        "x": 1155,
        "y": 480,
        "wires": []
    },
    {
        "id": "5a10fc701135b50d",
        "type": "link out",
        "z": "ff0141ba0f0c7234",
        "g": "78e09083a861e13e",
        "name": "night",
        "mode": "link",
        "links": [
            "71f42f61777d49d9"
        ],
        "x": 1155,
        "y": 520,
        "wires": []
    },
    {
        "id": "ea959d418216fe68",
        "type": "link in",
        "z": "ff0141ba0f0c7234",
        "g": "78e09083a861e13e",
        "name": "time",
        "links": [
            "a9ea7694289d75de"
        ],
        "x": 895,
        "y": 440,
        "wires": [
            [
                "65ab6145dd1c2e19"
            ]
        ]
    },
    {
        "id": "59e320abec722230",
        "type": "link out",
        "z": "ff0141ba0f0c7234",
        "g": "053656a9e6f3379c",
        "name": "activate morning",
        "mode": "link",
        "links": [
            "e74fcadba6a2b4ca",
            "07ccb0b07e6fada8",
            "ec4c4a28a59d105e",
            "08ca72b8e815a992",
            "de84c77427959f96",
            "52f0cba3f9b87632",
            "df41f3a116d28de2",
            "2bb38044a932fa69"
        ],
        "x": 435,
        "y": 360,
        "wires": []
    },
    {
        "id": "52a74204d47efd1e",
        "type": "link out",
        "z": "ff0141ba0f0c7234",
        "g": "053656a9e6f3379c",
        "name": "activate night",
        "mode": "link",
        "links": [
            "fbd53f7f18ca6655",
            "3ed1a4d37d1548b4",
            "ec4c4a28a59d105e",
            "ec0f7c926936a835",
            "de84c77427959f96",
            "0acba8178934baa1",
            "012902774c9657f1",
            "2bb38044a932fa69"
        ],
        "x": 435,
        "y": 520,
        "wires": []
    },
    {
        "id": "6957440564321846",
        "type": "link out",
        "z": "ff0141ba0f0c7234",
        "g": "053656a9e6f3379c",
        "name": "trigger main floor evening",
        "mode": "link",
        "links": [
            "6cae9b1ccc68cb9e",
            "fe5fdd858e8b907d"
        ],
        "x": 435,
        "y": 480,
        "wires": []
    },
    {
        "id": "9b05a84bf2e36872",
        "type": "link out",
        "z": "ff0141ba0f0c7234",
        "g": "053656a9e6f3379c",
        "name": "trigger yard tribal",
        "mode": "link",
        "links": [
            "a6475288998b4e07",
            "7ac02c6645861b20",
            "510f4653645e17d0"
        ],
        "x": 655,
        "y": 360,
        "wires": []
    },
    {
        "id": "6051debe54e3825e",
        "type": "link out",
        "z": "ff0141ba0f0c7234",
        "g": "053656a9e6f3379c",
        "name": "trigger yard spooky",
        "mode": "link",
        "links": [
            "a225232dc86a3b6f",
            "f92a8accf963b5bf",
            "feaf54e6c16337c1"
        ],
        "x": 655,
        "y": 400,
        "wires": []
    },
    {
        "id": "13ec2fe1e16094a1",
        "type": "link out",
        "z": "ff0141ba0f0c7234",
        "g": "053656a9e6f3379c",
        "name": "trigger yard jolly",
        "mode": "link",
        "links": [
            "60976d31a8dafe99",
            "a225232dc86a3b6f",
            "a6475288998b4e07",
            "434961afc8e6268a",
            "f92a8accf963b5bf",
            "7ac02c6645861b20",
            "cb0bc87b9e465a2f",
            "feaf54e6c16337c1",
            "510f4653645e17d0"
        ],
        "x": 655,
        "y": 440,
        "wires": []
    },
    {
        "id": "84118b9049ec3439",
        "type": "link out",
        "z": "ff0141ba0f0c7234",
        "g": "053656a9e6f3379c",
        "name": "trigger yard standard",
        "mode": "link",
        "links": [
            "18f53b7627e645e4",
            "bcf937398010e69d",
            "b11c745f6ce17117"
        ],
        "x": 655,
        "y": 480,
        "wires": []
    },
    {
        "id": "4bb92f343cc9a859",
        "type": "link in",
        "z": "ff0141ba0f0c7234",
        "g": "053656a9e6f3379c",
        "name": "time",
        "links": [
            "a9ea7694289d75de"
        ],
        "x": 175,
        "y": 440,
        "wires": [
            [
                "06e95c81925fd3c3"
            ]
        ]
    },
    {
        "id": "74f456c57bd0405f",
        "type": "delay",
        "z": "ff0141ba0f0c7234",
        "g": "276fb48c5a5f5cf0",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "3",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 290,
        "y": 160,
        "wires": [
            [
                "3db511b8fbb93369"
            ]
        ]
    },
    {
        "id": "3db511b8fbb93369",
        "type": "mqtt out",
        "z": "ff0141ba0f0c7234",
        "g": "276fb48c5a5f5cf0",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "722d62f3b93039c3",
        "x": 430,
        "y": 160,
        "wires": []
    },
    {
        "id": "efbd1b79e54e0bf7",
        "type": "link in",
        "z": "ff0141ba0f0c7234",
        "g": "276fb48c5a5f5cf0",
        "name": "send to broker",
        "links": [
            "4b2e5cdaca43a71b",
            "968fd6d85ac60a62",
            "54bbaac5bafb7512",
            "00b200c8b96373d9"
        ],
        "x": 175,
        "y": 160,
        "wires": [
            [
                "74f456c57bd0405f"
            ]
        ]
    },
    {
        "id": "d935f691d63e1e77",
        "type": "status",
        "z": "ff0141ba0f0c7234",
        "g": "276fb48c5a5f5cf0",
        "name": "mqtt queue status",
        "scope": [
            "74f456c57bd0405f"
        ],
        "x": 270,
        "y": 220,
        "wires": [
            [
                "3a71b6d844f7acb7"
            ]
        ]
    },
    {
        "id": "ec3b19f7f91f026d",
        "type": "status",
        "z": "ff0141ba0f0c7234",
        "g": "276fb48c5a5f5cf0",
        "name": "mqtt connection status",
        "scope": [
            "3db511b8fbb93369"
        ],
        "x": 260,
        "y": 260,
        "wires": [
            [
                "4f8791884f618315"
            ]
        ]
    },
    {
        "id": "1a9f2ae66bc3b97b",
        "type": "ui_text",
        "z": "ff0141ba0f0c7234",
        "g": "276fb48c5a5f5cf0",
        "group": "d198490f207c2a62",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "MQTT Queue Status",
        "label": "Queue",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 640,
        "y": 220,
        "wires": []
    },
    {
        "id": "c985b6125c7dee4a",
        "type": "ui_text",
        "z": "ff0141ba0f0c7234",
        "g": "276fb48c5a5f5cf0",
        "group": "d198490f207c2a62",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "MQTT Connection Status",
        "label": "Queue",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 650,
        "y": 260,
        "wires": []
    },
    {
        "id": "3a71b6d844f7acb7",
        "type": "change",
        "z": "ff0141ba0f0c7234",
        "g": "276fb48c5a5f5cf0",
        "name": "parse status",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$substringAfter(status.text, 'node-red:common.status.')",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 450,
        "y": 220,
        "wires": [
            [
                "1a9f2ae66bc3b97b"
            ]
        ]
    },
    {
        "id": "4f8791884f618315",
        "type": "change",
        "z": "ff0141ba0f0c7234",
        "g": "276fb48c5a5f5cf0",
        "name": "parse status",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "$substringAfter(status.text, 'node-red:common.status.')",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 450,
        "y": 260,
        "wires": [
            [
                "c985b6125c7dee4a"
            ]
        ]
    },
    {
        "id": "af1881c6e1166196",
        "type": "comment",
        "z": "ff0141ba0f0c7234",
        "g": "276fb48c5a5f5cf0",
        "name": "send all mqtt messages through this link",
        "info": "",
        "x": 310,
        "y": 120,
        "wires": []
    },
    {
        "id": "34385092a355cd47",
        "type": "comment",
        "z": "ff0141ba0f0c7234",
        "g": "053656a9e6f3379c",
        "name": "handle nodered/automation/time events",
        "info": "",
        "x": 310,
        "y": 560,
        "wires": []
    },
    {
        "id": "6d664c1fce229c1e",
        "type": "comment",
        "z": "ff0141ba0f0c7234",
        "g": "78e09083a861e13e",
        "name": "handle nodered/automation/time events",
        "info": "",
        "x": 1030,
        "y": 560,
        "wires": []
    },
    {
        "id": "7fb89c4ad68fb376",
        "type": "comment",
        "z": "ff0141ba0f0c7234",
        "name": "view info tab for this flow for important configuration and usage documentation",
        "info": "",
        "x": 410,
        "y": 40,
        "wires": []
    },
    {
        "id": "06e95c81925fd3c3",
        "type": "switch",
        "z": "ff0141ba0f0c7234",
        "g": "053656a9e6f3379c",
        "name": "time",
        "property": "payload.time",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "morning",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "evening",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "night",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 270,
        "y": 440,
        "wires": [
            [
                "59e320abec722230"
            ],
            [
                "8a9ced356d9b863b",
                "6957440564321846"
            ],
            [
                "52a74204d47efd1e"
            ]
        ]
    },
    {
        "id": "8a9ced356d9b863b",
        "type": "switch",
        "z": "ff0141ba0f0c7234",
        "g": "053656a9e6f3379c",
        "name": "theme",
        "property": "payload.theme",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "tribal",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "spooky",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "jolly",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 470,
        "y": 420,
        "wires": [
            [
                "9b05a84bf2e36872"
            ],
            [
                "6051debe54e3825e"
            ],
            [
                "13ec2fe1e16094a1"
            ],
            [
                "84118b9049ec3439"
            ]
        ]
    },
    {
        "id": "14e5342cb50f366f",
        "type": "link out",
        "z": "c7141ffb22d64190",
        "g": "70e9b8db12799d18",
        "name": "return from ground floor hue api",
        "mode": "return",
        "links": [],
        "x": 1295,
        "y": 60,
        "wires": []
    },
    {
        "id": "7df3e5fbd6e9aa8a",
        "type": "link in",
        "z": "c7141ffb22d64190",
        "g": "70e9b8db12799d18",
        "name": "send to ground floor hue",
        "links": [],
        "x": 1035,
        "y": 60,
        "wires": [
            [
                "3b5ab296575b53d4"
            ]
        ],
        "outputLabels": [
            "topic = uri, payload = body, method = HTTP request type"
        ]
    },
    {
        "id": "3b5ab296575b53d4",
        "type": "subflow:5785c8d9f39df67e",
        "z": "c7141ffb22d64190",
        "g": "70e9b8db12799d18",
        "name": "",
        "env": [
            {
                "name": "ADDRESS",
                "value": "GROUND_FLOOR_HUE_ADDRESS",
                "type": "env"
            },
            {
                "name": "KEY",
                "value": "GROUND_FLOOR_HUE_KEY",
                "type": "env"
            }
        ],
        "x": 1170,
        "y": 60,
        "wires": [
            [
                "14e5342cb50f366f"
            ]
        ]
    },
    {
        "id": "51bce99c75aa12c6",
        "type": "inject",
        "z": "c7141ffb22d64190",
        "g": "290b83ef8e01ae0f",
        "name": "create key",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 320,
        "wires": [
            [
                "73a1ec5ed8ebc167"
            ]
        ]
    },
    {
        "id": "f3ab10cd192709b0",
        "type": "debug",
        "z": "c7141ffb22d64190",
        "g": "290b83ef8e01ae0f",
        "name": "ground floor application key",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "msg",
        "x": 580,
        "y": 320,
        "wires": []
    },
    {
        "id": "73a1ec5ed8ebc167",
        "type": "subflow:75bc72a16c4da2c8",
        "z": "c7141ffb22d64190",
        "g": "290b83ef8e01ae0f",
        "name": "",
        "env": [
            {
                "name": "ADDRESS",
                "value": "GROUND_FLOOR_HUE_ADDRESS",
                "type": "env"
            },
            {
                "name": "USERNAME",
                "value": "nodered#groundfloor",
                "type": "str"
            }
        ],
        "x": 320,
        "y": 320,
        "wires": [
            [
                "f3ab10cd192709b0"
            ]
        ]
    },
    {
        "id": "8c9d79d2791e9b02",
        "type": "link call",
        "z": "c7141ffb22d64190",
        "g": "431ae4bdb7346af5",
        "name": "",
        "links": [
            "7df3e5fbd6e9aa8a"
        ],
        "timeout": "30",
        "x": 770,
        "y": 120,
        "wires": [
            [
                "988cc7effd5a036f"
            ]
        ]
    },
    {
        "id": "7d283a2fc0d30093",
        "type": "subflow:4e89e7c952d56c09",
        "z": "c7141ffb22d64190",
        "g": "b0f5ce3a323b7dd7",
        "name": "",
        "env": [
            {
                "name": "ADDRESS",
                "value": "GROUND_FLOOR_HUE_ADDRESS",
                "type": "env"
            },
            {
                "name": "KEY",
                "value": "GROUND_FLOOR_HUE_KEY",
                "type": "env"
            },
            {
                "name": "TOPIC",
                "value": "GROUND_FLOOR_HUE_TOPIC",
                "type": "env"
            }
        ],
        "x": 1090,
        "y": 160,
        "wires": [
            [
                "54bbaac5bafb7512"
            ]
        ]
    },
    {
        "id": "52f0cba3f9b87632",
        "type": "link in",
        "z": "c7141ffb22d64190",
        "g": "f718c99bbc8e36c9",
        "name": "main floor off",
        "links": [
            "981dbc2364b09d66",
            "e53fa5ad2c0bc25a",
            "23eec62f6bec1030",
            "5950aa6c0df32eb2",
            "59e320abec722230"
        ],
        "x": 155,
        "y": 420,
        "wires": [
            [
                "72acc2a8bcbc1528"
            ]
        ]
    },
    {
        "id": "72acc2a8bcbc1528",
        "type": "change",
        "z": "c7141ffb22d64190",
        "g": "f718c99bbc8e36c9",
        "name": "turn off",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource/grouped_light/9c1c7975-2f47-4552-bac8-c19b643cd678",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"on\":{\"on\":false}}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 250,
        "y": 420,
        "wires": [
            [
                "a3fa25812dc1f4c0"
            ]
        ]
    },
    {
        "id": "a3fa25812dc1f4c0",
        "type": "link call",
        "z": "c7141ffb22d64190",
        "g": "f718c99bbc8e36c9",
        "name": "",
        "links": [
            "7df3e5fbd6e9aa8a"
        ],
        "timeout": "30",
        "x": 430,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "0acba8178934baa1",
        "type": "link in",
        "z": "c7141ffb22d64190",
        "g": "f718c99bbc8e36c9",
        "name": "main floor nightlight",
        "links": [
            "549a2335fb839c37",
            "4c171923173c6e68",
            "b290a3d4ebcd7653",
            "4ed8bcf218333395",
            "52a74204d47efd1e"
        ],
        "x": 155,
        "y": 480,
        "wires": [
            [
                "1c5888bd24d0a311"
            ]
        ]
    },
    {
        "id": "37e508aaad9b809e",
        "type": "link call",
        "z": "c7141ffb22d64190",
        "g": "f718c99bbc8e36c9",
        "name": "",
        "links": [
            "7df3e5fbd6e9aa8a"
        ],
        "timeout": "30",
        "x": 450,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "1c5888bd24d0a311",
        "type": "change",
        "z": "c7141ffb22d64190",
        "g": "f718c99bbc8e36c9",
        "name": "night light",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource/scene/48c39b9f-1599-4a5c-b7f6-bad6cad4029a",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"recall\":{\"action\":\"active\"}}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 260,
        "y": 480,
        "wires": [
            [
                "37e508aaad9b809e"
            ]
        ]
    },
    {
        "id": "fe5fdd858e8b907d",
        "type": "link in",
        "z": "c7141ffb22d64190",
        "g": "f718c99bbc8e36c9",
        "name": "main floor sunset",
        "links": [
            "2837183323a61e04",
            "b77799d3430f62c7",
            "6f67a01c3ee8a16f",
            "b29a7ab55a3476e5",
            "6957440564321846"
        ],
        "x": 155,
        "y": 540,
        "wires": [
            [
                "64afce8ff0b75f48"
            ]
        ]
    },
    {
        "id": "dce6b6fd885e2956",
        "type": "link call",
        "z": "c7141ffb22d64190",
        "g": "f718c99bbc8e36c9",
        "name": "",
        "links": [
            "7df3e5fbd6e9aa8a"
        ],
        "timeout": "30",
        "x": 430,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "64afce8ff0b75f48",
        "type": "change",
        "z": "c7141ffb22d64190",
        "g": "f718c99bbc8e36c9",
        "name": "sunset",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource/scene/6eff0801-01e2-4803-9840-e31c06cee079",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"recall\":{\"action\":\"dynamic_palette\"}}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 250,
        "y": 540,
        "wires": [
            [
                "dce6b6fd885e2956"
            ]
        ]
    },
    {
        "id": "df41f3a116d28de2",
        "type": "link in",
        "z": "c7141ffb22d64190",
        "g": "f848d645bd1abc5b",
        "name": "main bathroom off",
        "links": [
            "e696e0a2acb678c2",
            "f597e3f10639062f",
            "ce589288779cef4a",
            "981dbc2364b09d66",
            "e53fa5ad2c0bc25a",
            "23eec62f6bec1030",
            "5950aa6c0df32eb2",
            "59e320abec722230"
        ],
        "x": 155,
        "y": 640,
        "wires": [
            [
                "a122f1a4fc3399e5"
            ]
        ]
    },
    {
        "id": "a122f1a4fc3399e5",
        "type": "change",
        "z": "c7141ffb22d64190",
        "g": "f848d645bd1abc5b",
        "name": "turn off",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"on\":{\"on\":false}}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource/grouped_light/aea74e74-d544-4d08-ad71-3b6665045256",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 250,
        "y": 640,
        "wires": [
            [
                "12b6bc8a0257750a"
            ]
        ]
    },
    {
        "id": "12b6bc8a0257750a",
        "type": "link call",
        "z": "c7141ffb22d64190",
        "g": "f848d645bd1abc5b",
        "name": "",
        "links": [
            "7df3e5fbd6e9aa8a"
        ],
        "timeout": "30",
        "x": 430,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "200e1af02e26479b",
        "type": "link call",
        "z": "c7141ffb22d64190",
        "g": "f848d645bd1abc5b",
        "name": "",
        "links": [
            "7df3e5fbd6e9aa8a"
        ],
        "timeout": "30",
        "x": 450,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "012902774c9657f1",
        "type": "link in",
        "z": "c7141ffb22d64190",
        "g": "f848d645bd1abc5b",
        "name": "main bathroom nightlight",
        "links": [
            "1fa973a7d8e65e3c",
            "549a2335fb839c37",
            "4c171923173c6e68",
            "b290a3d4ebcd7653",
            "4ed8bcf218333395",
            "52a74204d47efd1e"
        ],
        "x": 155,
        "y": 700,
        "wires": [
            [
                "90cec6147a7de28f"
            ]
        ]
    },
    {
        "id": "90cec6147a7de28f",
        "type": "change",
        "z": "c7141ffb22d64190",
        "g": "f848d645bd1abc5b",
        "name": "night light",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"recall\":{\"action\":\"active\"}}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource/scene/5d507fb6-89f6-459a-b327-0fffd0c6dc48",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 260,
        "y": 700,
        "wires": [
            [
                "200e1af02e26479b"
            ]
        ]
    },
    {
        "id": "4b146e0f1b9bcccb",
        "type": "link call",
        "z": "c7141ffb22d64190",
        "g": "f8dce80b21d7f706",
        "name": "",
        "links": [
            "7df3e5fbd6e9aa8a"
        ],
        "timeout": "30",
        "x": 1090,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "b11c745f6ce17117",
        "type": "link in",
        "z": "c7141ffb22d64190",
        "g": "f8dce80b21d7f706",
        "name": "yard sunset",
        "links": [
            "e270017761dfd27d",
            "2272d3c9be7a6390",
            "bbabd588c05b979f",
            "b8723d53ddad808a",
            "84118b9049ec3439"
        ],
        "x": 815,
        "y": 520,
        "wires": [
            [
                "7e843abc77537f92"
            ]
        ]
    },
    {
        "id": "7e843abc77537f92",
        "type": "change",
        "z": "c7141ffb22d64190",
        "g": "f8dce80b21d7f706",
        "name": "sunset",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource/scene/9b6935e2-f8ed-4f91-83a2-2bff1850da99",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"recall\":{\"action\":\"dynamic_palette\"}}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 910,
        "y": 520,
        "wires": [
            [
                "4b146e0f1b9bcccb"
            ]
        ]
    },
    {
        "id": "52d3dd927cb7e37e",
        "type": "link call",
        "z": "c7141ffb22d64190",
        "g": "f8dce80b21d7f706",
        "name": "",
        "links": [
            "7df3e5fbd6e9aa8a"
        ],
        "timeout": "30",
        "x": 1090,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "cb0bc87b9e465a2f",
        "type": "link in",
        "z": "c7141ffb22d64190",
        "g": "f8dce80b21d7f706",
        "name": "yard jolly",
        "links": [
            "b0ee0f2f8155fe9b",
            "81221f83aad45655",
            "83b840b1c5858876",
            "758cfea08b622975",
            "13ec2fe1e16094a1"
        ],
        "x": 815,
        "y": 700,
        "wires": [
            [
                "da79b96d161e1c28"
            ]
        ]
    },
    {
        "id": "da79b96d161e1c28",
        "type": "change",
        "z": "c7141ffb22d64190",
        "g": "f8dce80b21d7f706",
        "name": "jolly",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource/scene/12571f23-7714-4b47-8e75-a3040389b788",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"recall\":{\"action\":\"dynamic_palette\"}}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 910,
        "y": 700,
        "wires": [
            [
                "52d3dd927cb7e37e"
            ]
        ]
    },
    {
        "id": "2bb38044a932fa69",
        "type": "link in",
        "z": "c7141ffb22d64190",
        "g": "f8dce80b21d7f706",
        "name": "yard off",
        "links": [
            "549a2335fb839c37",
            "981dbc2364b09d66",
            "e53fa5ad2c0bc25a",
            "4c171923173c6e68",
            "23eec62f6bec1030",
            "b290a3d4ebcd7653",
            "5950aa6c0df32eb2",
            "4ed8bcf218333395",
            "59e320abec722230",
            "52a74204d47efd1e"
        ],
        "x": 815,
        "y": 460,
        "wires": [
            [
                "64a68d2a2d2e93cd"
            ]
        ]
    },
    {
        "id": "64a68d2a2d2e93cd",
        "type": "change",
        "z": "c7141ffb22d64190",
        "g": "f8dce80b21d7f706",
        "name": "turn off",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"on\":{\"on\":false}}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource/grouped_light/bad8480b-b404-42d1-a9e7-a4a69f400971",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 910,
        "y": 460,
        "wires": [
            [
                "7f619f84fcad1d75"
            ]
        ]
    },
    {
        "id": "7f619f84fcad1d75",
        "type": "link call",
        "z": "c7141ffb22d64190",
        "g": "f8dce80b21d7f706",
        "name": "",
        "links": [
            "7df3e5fbd6e9aa8a"
        ],
        "timeout": "30",
        "x": 1090,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "d43f117e07910821",
        "type": "link call",
        "z": "c7141ffb22d64190",
        "g": "f8dce80b21d7f706",
        "name": "",
        "links": [
            "7df3e5fbd6e9aa8a"
        ],
        "timeout": "30",
        "x": 1110,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "feaf54e6c16337c1",
        "type": "link in",
        "z": "c7141ffb22d64190",
        "g": "f8dce80b21d7f706",
        "name": "yard spooky",
        "links": [
            "b0ee0f2f8155fe9b",
            "c68369c3781694e3",
            "d568e31cb3452775",
            "81221f83aad45655",
            "6c4e5524b478fb31",
            "83b840b1c5858876",
            "e0a9d45fbfcb3532",
            "758cfea08b622975",
            "6051debe54e3825e",
            "13ec2fe1e16094a1"
        ],
        "x": 815,
        "y": 640,
        "wires": [
            [
                "d92030613c5ce50e"
            ]
        ]
    },
    {
        "id": "d92030613c5ce50e",
        "type": "change",
        "z": "c7141ffb22d64190",
        "g": "f8dce80b21d7f706",
        "name": "spooky",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource/scene/70a0a8a6-b4b7-4b24-a9cf-0ecea0f359cc",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"recall\":{\"action\":\"dynamic_palette\"}}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 640,
        "wires": [
            [
                "d43f117e07910821"
            ]
        ]
    },
    {
        "id": "a80f7d1788543bf0",
        "type": "link call",
        "z": "c7141ffb22d64190",
        "g": "f8dce80b21d7f706",
        "name": "",
        "links": [
            "7df3e5fbd6e9aa8a"
        ],
        "timeout": "30",
        "x": 1090,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "510f4653645e17d0",
        "type": "link in",
        "z": "c7141ffb22d64190",
        "g": "f8dce80b21d7f706",
        "name": "yard tribal",
        "links": [
            "b0ee0f2f8155fe9b",
            "7ab1620c3349854b",
            "ba11519631ca9918",
            "81221f83aad45655",
            "a63ed720004a623c",
            "83b840b1c5858876",
            "6a4e3c8d5c47d1b7",
            "758cfea08b622975",
            "9b05a84bf2e36872",
            "13ec2fe1e16094a1"
        ],
        "x": 815,
        "y": 580,
        "wires": [
            [
                "67013f62ca5bcb43"
            ]
        ]
    },
    {
        "id": "67013f62ca5bcb43",
        "type": "change",
        "z": "c7141ffb22d64190",
        "g": "f8dce80b21d7f706",
        "name": "tribal",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource/scene/c4681d32-3368-43cd-9cf1-436132521068",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"recall\":{\"action\":\"dynamic_palette\"}}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "PUT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 910,
        "y": 580,
        "wires": [
            [
                "a80f7d1788543bf0"
            ]
        ]
    },
    {
        "id": "3324951b765c9f12",
        "type": "ui_template",
        "z": "c7141ffb22d64190",
        "g": "431ae4bdb7346af5",
        "group": "21f11f110d626f5a",
        "name": "Ground Floor Controls",
        "order": 2,
        "width": "6",
        "height": "19",
        "format": "<div>\n    <div ng-repeat=\"(typename, type) in msg.payload\">\n        <div ng-repeat=\"group in type\">\n            <p style=\"text-align:center\">{{group.name}}</p>\n            <p style=\"text-align:center\">\n                <md-button style=\"display:inline-block;margin:1px\"\n                    ng-click=\"send({topic: 'resource/grouped_light/' + group.grouped_light, payload: {on:{on:false}}, method: 'PUT'})\">\n                    Off\n                </md-button>\n                <md-button style=\"display:inline-block;margin:1px\" ng-repeat=\"scene in group.scene\"\n                    ng-click=\"send({topic: 'resource/scene/' + scene.id, payload: {recall:{action:'dynamic_palette'}}, method: 'PUT'})\">\n                    {{scene.name}}\n                </md-button>\n            </p>\n        </div>\n    </div>\n</div>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 560,
        "y": 180,
        "wires": [
            [
                "2736286441feda07"
            ]
        ]
    },
    {
        "id": "2736286441feda07",
        "type": "link call",
        "z": "c7141ffb22d64190",
        "g": "431ae4bdb7346af5",
        "name": "",
        "links": [
            "7df3e5fbd6e9aa8a"
        ],
        "timeout": "30",
        "x": 790,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "7def18ac26259af3",
        "type": "inject",
        "z": "c7141ffb22d64190",
        "g": "431ae4bdb7346af5",
        "name": "at start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 120,
        "wires": [
            [
                "abb71db57910be2f"
            ]
        ]
    },
    {
        "id": "abb71db57910be2f",
        "type": "ui_button",
        "z": "c7141ffb22d64190",
        "g": "431ae4bdb7346af5",
        "name": "Refresh Ground Floor Controls",
        "group": "21f11f110d626f5a",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-refresh",
        "payload": "",
        "payloadType": "date",
        "topic": "topic",
        "topicType": "msg",
        "x": 330,
        "y": 120,
        "wires": [
            [
                "1ee8aff15eae874f"
            ]
        ]
    },
    {
        "id": "1ee8aff15eae874f",
        "type": "change",
        "z": "c7141ffb22d64190",
        "g": "431ae4bdb7346af5",
        "name": "get resources",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "GET",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 120,
        "wires": [
            [
                "8c9d79d2791e9b02"
            ]
        ]
    },
    {
        "id": "54bbaac5bafb7512",
        "type": "link out",
        "z": "c7141ffb22d64190",
        "g": "b0f5ce3a323b7dd7",
        "name": "send to broker",
        "mode": "link",
        "links": [
            "b9100b6a29fef164",
            "efbd1b79e54e0bf7"
        ],
        "x": 1195,
        "y": 160,
        "wires": []
    },
    {
        "id": "988cc7effd5a036f",
        "type": "subflow:9781b266d05451d0",
        "z": "c7141ffb22d64190",
        "g": "431ae4bdb7346af5",
        "name": "",
        "x": 340,
        "y": 180,
        "wires": [
            [
                "3324951b765c9f12"
            ]
        ]
    },
    {
        "id": "edd68fdd0863619a",
        "type": "comment",
        "z": "c7141ffb22d64190",
        "g": "290b83ef8e01ae0f",
        "name": "use this to create the value to pass as the ${KEY} parameter in various subflows",
        "info": "",
        "x": 320,
        "y": 280,
        "wires": []
    },
    {
        "id": "519ec116eef2b5a0",
        "type": "comment",
        "z": "c7141ffb22d64190",
        "name": "view info tab for this flow for important configuration and usage documentation",
        "info": "",
        "x": 290,
        "y": 40,
        "wires": []
    },
    {
        "id": "f824597938fe8446",
        "type": "ui_text",
        "z": "c7141ffb22d64190",
        "g": "7a60f981743e0c00",
        "group": "03b0e40844d33477",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Ground Floor Hue readyState",
        "label": "readyState",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1210,
        "y": 280,
        "wires": []
    },
    {
        "id": "362e8e438951f6f5",
        "type": "subflow:9601cbf2386d897b",
        "z": "c7141ffb22d64190",
        "g": "7a60f981743e0c00",
        "name": "Count Ground Floor Hue onopen",
        "env": [
            {
                "name": "TOPIC",
                "value": "${GROUND_FLOOR_HUE_TOPIC}/open",
                "type": "env"
            }
        ],
        "x": 930,
        "y": 340,
        "wires": [
            [],
            [
                "b016ab17f51ffdc7"
            ]
        ]
    },
    {
        "id": "b016ab17f51ffdc7",
        "type": "ui_text",
        "z": "c7141ffb22d64190",
        "g": "7a60f981743e0c00",
        "group": "03b0e40844d33477",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Ground Floor Hue onopen Count",
        "label": "onopen",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1220,
        "y": 340,
        "wires": []
    },
    {
        "id": "ed8b62a9f546bb94",
        "type": "subflow:9601cbf2386d897b",
        "z": "c7141ffb22d64190",
        "g": "7a60f981743e0c00",
        "name": "Ground Floor Hue Status",
        "env": [
            {
                "name": "TOPIC",
                "value": "${GROUND_FLOOR_HUE_TOPIC}/status",
                "type": "env"
            }
        ],
        "x": 950,
        "y": 280,
        "wires": [
            [
                "f824597938fe8446"
            ],
            []
        ]
    },
    {
        "id": "735f828714a9c98f",
        "type": "link out",
        "z": "810a8b527afd2b1b",
        "g": "cde8d276df445e2f",
        "name": "return from basement hue api",
        "mode": "return",
        "links": [],
        "x": 1295,
        "y": 60,
        "wires": []
    },
    {
        "id": "64274eb0d8b9e5dd",
        "type": "link in",
        "z": "810a8b527afd2b1b",
        "g": "cde8d276df445e2f",
        "name": "send to basement hue",
        "links": [],
        "x": 1035,
        "y": 60,
        "wires": [
            [
                "33b523d447c86f23"
            ]
        ],
        "outputLabels": [
            "topic = uri, payload = body, method = HTTP request type"
        ]
    },
    {
        "id": "33b523d447c86f23",
        "type": "subflow:5785c8d9f39df67e",
        "z": "810a8b527afd2b1b",
        "g": "cde8d276df445e2f",
        "name": "",
        "env": [
            {
                "name": "ADDRESS",
                "value": "BASEMENT_HUE_ADDRESS",
                "type": "env"
            },
            {
                "name": "KEY",
                "value": "BASEMENT_HUE_KEY",
                "type": "env"
            }
        ],
        "x": 1170,
        "y": 60,
        "wires": [
            [
                "735f828714a9c98f"
            ]
        ]
    },
    {
        "id": "608e6356fbb9f384",
        "type": "inject",
        "z": "810a8b527afd2b1b",
        "g": "e7188f251e14aea1",
        "name": "create key",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 320,
        "wires": [
            [
                "a12bdbda86868f06"
            ]
        ]
    },
    {
        "id": "26973bac8c6a9dba",
        "type": "debug",
        "z": "810a8b527afd2b1b",
        "g": "e7188f251e14aea1",
        "name": "basement hue application key",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload[0].success.username",
        "statusType": "msg",
        "x": 590,
        "y": 320,
        "wires": []
    },
    {
        "id": "a12bdbda86868f06",
        "type": "subflow:75bc72a16c4da2c8",
        "z": "810a8b527afd2b1b",
        "g": "e7188f251e14aea1",
        "name": "",
        "env": [
            {
                "name": "ADDRESS",
                "value": "BASEMENT_HUE_ADDRESS",
                "type": "env"
            },
            {
                "name": "USERNAME",
                "value": "nodered#basementhue",
                "type": "str"
            }
        ],
        "x": 320,
        "y": 320,
        "wires": [
            [
                "26973bac8c6a9dba"
            ]
        ]
    },
    {
        "id": "5c8d9ca80254e11c",
        "type": "link call",
        "z": "810a8b527afd2b1b",
        "g": "4e52881346c9e44b",
        "name": "",
        "links": [
            "64274eb0d8b9e5dd"
        ],
        "timeout": "30",
        "x": 760,
        "y": 120,
        "wires": [
            [
                "250b8a9cbab3774e"
            ]
        ]
    },
    {
        "id": "7dcd1d246a096330",
        "type": "subflow:4e89e7c952d56c09",
        "z": "810a8b527afd2b1b",
        "g": "599f55425211e232",
        "name": "",
        "env": [
            {
                "name": "ADDRESS",
                "value": "BASEMENT_HUE_ADDRESS",
                "type": "env"
            },
            {
                "name": "KEY",
                "value": "BASEMENT_HUE_KEY",
                "type": "env"
            },
            {
                "name": "TOPIC",
                "value": "BASEMENT_HUE_TOPIC",
                "type": "env"
            }
        ],
        "x": 1090,
        "y": 160,
        "wires": [
            [
                "968fd6d85ac60a62"
            ]
        ]
    },
    {
        "id": "80384d1e957ed3ca",
        "type": "link call",
        "z": "810a8b527afd2b1b",
        "g": "4e52881346c9e44b",
        "name": "",
        "links": [
            "64274eb0d8b9e5dd"
        ],
        "timeout": "30",
        "x": 780,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "a28b1c17c4f3e3ee",
        "type": "ui_template",
        "z": "810a8b527afd2b1b",
        "g": "4e52881346c9e44b",
        "group": "178c0c0ade9cbfc5",
        "name": "Basement Hue Controls",
        "order": 2,
        "width": "6",
        "height": "10",
        "format": "<div>\n    <div ng-repeat=\"(typename, type) in msg.payload\">\n        <div ng-repeat=\"group in type\">\n            <p style=\"text-align:center\">{{group.name}}</p>\n            <p style=\"text-align:center\">\n                <md-button style=\"display:inline-block;margin:1px\"\n                    ng-click=\"send({topic: 'resource/grouped_light/' + group.grouped_light, payload: {on:{on:false}}, method: 'PUT'})\">\n                    Off\n                </md-button>\n                <md-button style=\"display:inline-block;margin:1px\" ng-repeat=\"scene in group.scene\"\n                    ng-click=\"send({topic: 'resource/scene/' + scene.id, payload: {recall:{action:'dynamic_palette'}}, method: 'PUT'})\">\n                    {{scene.name}}\n                </md-button>\n            </p>\n        </div>\n    </div>\n</div>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 550,
        "y": 180,
        "wires": [
            [
                "80384d1e957ed3ca"
            ]
        ]
    },
    {
        "id": "678145510dc4c76f",
        "type": "inject",
        "z": "810a8b527afd2b1b",
        "g": "4e52881346c9e44b",
        "name": "at start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 120,
        "wires": [
            [
                "d638e45951bb8819"
            ]
        ]
    },
    {
        "id": "d638e45951bb8819",
        "type": "ui_button",
        "z": "810a8b527afd2b1b",
        "g": "4e52881346c9e44b",
        "name": "Refresh Basement Hue Controls",
        "group": "178c0c0ade9cbfc5",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-refresh",
        "payload": "",
        "payloadType": "date",
        "topic": "topic",
        "topicType": "msg",
        "x": 330,
        "y": 120,
        "wires": [
            [
                "a2e5d0064800b5fb"
            ]
        ]
    },
    {
        "id": "a2e5d0064800b5fb",
        "type": "change",
        "z": "810a8b527afd2b1b",
        "g": "4e52881346c9e44b",
        "name": "get resources",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "resource",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "method",
                "pt": "msg",
                "to": "GET",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 120,
        "wires": [
            [
                "5c8d9ca80254e11c"
            ]
        ]
    },
    {
        "id": "968fd6d85ac60a62",
        "type": "link out",
        "z": "810a8b527afd2b1b",
        "g": "599f55425211e232",
        "name": "send to broker",
        "mode": "link",
        "links": [
            "b9100b6a29fef164",
            "efbd1b79e54e0bf7"
        ],
        "x": 1195,
        "y": 160,
        "wires": []
    },
    {
        "id": "250b8a9cbab3774e",
        "type": "subflow:9781b266d05451d0",
        "z": "810a8b527afd2b1b",
        "g": "4e52881346c9e44b",
        "name": "",
        "x": 320,
        "y": 180,
        "wires": [
            [
                "a28b1c17c4f3e3ee"
            ]
        ]
    },
    {
        "id": "bddbce9f11c0ea01",
        "type": "comment",
        "z": "810a8b527afd2b1b",
        "g": "e7188f251e14aea1",
        "name": "use this to create the value to pass as the ${KEY} parameter in various subflows",
        "info": "",
        "x": 320,
        "y": 280,
        "wires": []
    },
    {
        "id": "26089fb4c90891d7",
        "type": "comment",
        "z": "810a8b527afd2b1b",
        "name": "view info tab for this flow for important configuration and usage documentation",
        "info": "",
        "x": 290,
        "y": 40,
        "wires": []
    },
    {
        "id": "02ea0683c75f69c5",
        "type": "ui_text",
        "z": "810a8b527afd2b1b",
        "g": "1654aea0ccd3a289",
        "group": "a0da6d89d75fc6ac",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Basement Hue readyState",
        "label": "readyState",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1200,
        "y": 280,
        "wires": []
    },
    {
        "id": "70078a31791fbbc5",
        "type": "subflow:9601cbf2386d897b",
        "z": "810a8b527afd2b1b",
        "g": "1654aea0ccd3a289",
        "name": "Count Basement Hue onopen",
        "env": [
            {
                "name": "TOPIC",
                "value": "${BASEMENT_HUE_TOPIC}/open",
                "type": "env"
            }
        ],
        "x": 940,
        "y": 340,
        "wires": [
            [],
            [
                "b419f6a87901aa7d"
            ]
        ]
    },
    {
        "id": "b419f6a87901aa7d",
        "type": "ui_text",
        "z": "810a8b527afd2b1b",
        "g": "1654aea0ccd3a289",
        "group": "a0da6d89d75fc6ac",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Basement Hue onopen Count",
        "label": "onopen",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1210,
        "y": 340,
        "wires": []
    },
    {
        "id": "c87b61478949025d",
        "type": "subflow:9601cbf2386d897b",
        "z": "810a8b527afd2b1b",
        "g": "1654aea0ccd3a289",
        "name": "Basement Hue Status",
        "env": [
            {
                "name": "TOPIC",
                "value": "${BASEMENT_HUE_TOPIC}/status",
                "type": "env"
            }
        ],
        "x": 960,
        "y": 280,
        "wires": [
            [
                "02ea0683c75f69c5"
            ],
            []
        ]
    },
    {
        "id": "2f6cc09457939ce2",
        "type": "subflow:9c4e4702e4660adf",
        "z": "1cf0490e7de2f93d",
        "g": "87285e6bf01cff03",
        "name": "",
        "env": [
            {
                "name": "ADDRESS",
                "value": "POWERVIEW_ADDRESS",
                "type": "env"
            }
        ],
        "x": 300,
        "y": 220,
        "wires": [
            [
                "618e79a58ab8143a"
            ]
        ]
    },
    {
        "id": "7173aa38c9fa93dc",
        "type": "link in",
        "z": "1cf0490e7de2f93d",
        "g": "87285e6bf01cff03",
        "name": "activate powerview scene",
        "links": [
            "9f3d946a03de6aa8",
            "676c095bc7abab1e",
            "92a8459af7433d08",
            "d6caf0385ddcc934",
            "094c793f3a335844",
            "14f75f22c0a890cc",
            "4e5a85bfe405e198",
            "49039ff17e845f97"
        ],
        "x": 155,
        "y": 220,
        "wires": [
            [
                "2f6cc09457939ce2"
            ]
        ]
    },
    {
        "id": "618e79a58ab8143a",
        "type": "link out",
        "z": "1cf0490e7de2f93d",
        "g": "87285e6bf01cff03",
        "name": "return from set powerview scene",
        "mode": "return",
        "links": [],
        "x": 435,
        "y": 220,
        "wires": []
    },
    {
        "id": "71f42f61777d49d9",
        "type": "link in",
        "z": "1cf0490e7de2f93d",
        "g": "0770b0ba393f379d",
        "name": "close all shades",
        "links": [
            "08388db8f103b3a6",
            "fa1ec72a4270321c",
            "4a69e032bf396637",
            "0b72197569340d63",
            "5a10fc701135b50d"
        ],
        "x": 155,
        "y": 320,
        "wires": [
            [
                "16c6de044f949382"
            ]
        ]
    },
    {
        "id": "af010737ecd1f8d6",
        "type": "link call",
        "z": "1cf0490e7de2f93d",
        "g": "0770b0ba393f379d",
        "name": "",
        "links": [
            "7173aa38c9fa93dc"
        ],
        "timeout": "30",
        "x": 550,
        "y": 320,
        "wires": [
            [
                "63e50cac1b5a1b97"
            ]
        ]
    },
    {
        "id": "edec482fa879717d",
        "type": "link call",
        "z": "1cf0490e7de2f93d",
        "g": "0770b0ba393f379d",
        "name": "",
        "links": [
            "7173aa38c9fa93dc"
        ],
        "timeout": "30",
        "x": 1030,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "4d9c62d6c2145813",
        "type": "link in",
        "z": "1cf0490e7de2f93d",
        "g": "746733f8c81b5ccd",
        "name": "open all shades",
        "links": [
            "852b9ed1563a9966",
            "83801674771348bb",
            "cbfb68d15d64faa7",
            "7bb24887e8a01399",
            "06d9f4b53b9bbb6e",
            "5a5a3cf0e990c640",
            "cb25d319d7126480",
            "fc34e1d6c55a3985",
            "92c2876f08baadd9",
            "5638c682e2ac2fba"
        ],
        "x": 155,
        "y": 420,
        "wires": [
            [
                "4f656e2b5766e68f"
            ]
        ]
    },
    {
        "id": "1b984be8838e6815",
        "type": "link call",
        "z": "1cf0490e7de2f93d",
        "g": "746733f8c81b5ccd",
        "name": "",
        "links": [
            "7173aa38c9fa93dc"
        ],
        "timeout": "30",
        "x": 550,
        "y": 420,
        "wires": [
            [
                "5fc5b24cd49e520e"
            ]
        ]
    },
    {
        "id": "1b49d418ac1d553d",
        "type": "link call",
        "z": "1cf0490e7de2f93d",
        "g": "746733f8c81b5ccd",
        "name": "",
        "links": [
            "7173aa38c9fa93dc"
        ],
        "timeout": "30",
        "x": 1030,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "3fa2af1c1f32f8ee",
        "type": "link in",
        "z": "1cf0490e7de2f93d",
        "g": "e961376bbef01556",
        "name": "open east shades",
        "links": [
            "1cd05bf9545f7fd2",
            "74ebd31c8bede749",
            "28eacfa3cb120cc6",
            "c633c043693d29f4",
            "55f89a635c93f337"
        ],
        "x": 155,
        "y": 520,
        "wires": [
            [
                "1fcfbbdf6167f8c8"
            ]
        ]
    },
    {
        "id": "407f68edfd369a25",
        "type": "link call",
        "z": "1cf0490e7de2f93d",
        "g": "e961376bbef01556",
        "name": "",
        "links": [
            "7173aa38c9fa93dc"
        ],
        "timeout": "30",
        "x": 550,
        "y": 520,
        "wires": [
            [
                "86ad8ea7914b5e27"
            ]
        ]
    },
    {
        "id": "59f2f3b92b79087e",
        "type": "link call",
        "z": "1cf0490e7de2f93d",
        "g": "e961376bbef01556",
        "name": "",
        "links": [
            "7173aa38c9fa93dc"
        ],
        "timeout": "30",
        "x": 1030,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "cab89ebfeca22623",
        "type": "link in",
        "z": "1cf0490e7de2f93d",
        "g": "56e03f40c1727182",
        "name": "open west shades",
        "links": [
            "5938d52c5b7dff7f",
            "2cec2cb027e18141",
            "f5ee7979f10b51f4",
            "5ec89823b4e8d3aa",
            "b13e36ae61e678c5"
        ],
        "x": 155,
        "y": 620,
        "wires": [
            [
                "a0e918936b64e067"
            ]
        ]
    },
    {
        "id": "c906095c1f350eda",
        "type": "link call",
        "z": "1cf0490e7de2f93d",
        "g": "56e03f40c1727182",
        "name": "",
        "links": [
            "7173aa38c9fa93dc"
        ],
        "timeout": "30",
        "x": 550,
        "y": 620,
        "wires": [
            [
                "ea99355e0449d9ea"
            ]
        ]
    },
    {
        "id": "e8a3ad681677753f",
        "type": "link call",
        "z": "1cf0490e7de2f93d",
        "g": "56e03f40c1727182",
        "name": "",
        "links": [
            "7173aa38c9fa93dc"
        ],
        "timeout": "30",
        "x": 1030,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "942f0a1ef3d8ade3",
        "type": "subflow:bdefba026bd44159",
        "z": "1cf0490e7de2f93d",
        "g": "b48f76e13fc77aa7",
        "name": "",
        "env": [
            {
                "name": "ADDRESS",
                "value": "POWERVIEW_ADDRESS",
                "type": "env"
            }
        ],
        "x": 700,
        "y": 120,
        "wires": [
            [
                "85c26fe91dc71759"
            ]
        ]
    },
    {
        "id": "85c26fe91dc71759",
        "type": "ui_template",
        "z": "1cf0490e7de2f93d",
        "g": "b48f76e13fc77aa7",
        "group": "e3fcd4654cf9f3fc",
        "name": "Window Shade Controls",
        "order": 2,
        "width": "6",
        "height": "5",
        "format": "<div>\n    <div ng-repeat=\"room in msg.payload\" style=\"text-align:center\">\n        <p>{{room.name}}</p>\n        <md-button style=\"display:inline-block;margin:1px;text-align:center\" ng-repeat=\"scene in room.scenes\"\n            ng-click=\"send({payload: scene.id})\">\n            {{scene.name}}\n        </md-button>\n    </div>\n</div>",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 950,
        "y": 120,
        "wires": [
            [
                "175aa8cd2233a871"
            ]
        ]
    },
    {
        "id": "175aa8cd2233a871",
        "type": "link call",
        "z": "1cf0490e7de2f93d",
        "g": "b48f76e13fc77aa7",
        "name": "",
        "links": [
            "7173aa38c9fa93dc"
        ],
        "timeout": "30",
        "x": 1190,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "75bff418d99b8d56",
        "type": "inject",
        "z": "1cf0490e7de2f93d",
        "g": "b48f76e13fc77aa7",
        "name": "at start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 120,
        "wires": [
            [
                "7026f2de142e8ef2"
            ]
        ]
    },
    {
        "id": "7026f2de142e8ef2",
        "type": "ui_button",
        "z": "1cf0490e7de2f93d",
        "g": "b48f76e13fc77aa7",
        "name": "Referesh PowerView Metadata",
        "group": "e3fcd4654cf9f3fc",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-refresh",
        "payload": "",
        "payloadType": "date",
        "topic": "topic",
        "topicType": "msg",
        "x": 430,
        "y": 120,
        "wires": [
            [
                "942f0a1ef3d8ade3"
            ]
        ]
    },
    {
        "id": "16c6de044f949382",
        "type": "change",
        "z": "1cf0490e7de2f93d",
        "g": "0770b0ba393f379d",
        "name": "close dining room shades",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "41405",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 310,
        "y": 320,
        "wires": [
            [
                "af010737ecd1f8d6"
            ]
        ]
    },
    {
        "id": "63e50cac1b5a1b97",
        "type": "change",
        "z": "1cf0490e7de2f93d",
        "g": "0770b0ba393f379d",
        "name": "close living room shades",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "40564",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 320,
        "wires": [
            [
                "edec482fa879717d"
            ]
        ]
    },
    {
        "id": "4f656e2b5766e68f",
        "type": "change",
        "z": "1cf0490e7de2f93d",
        "g": "746733f8c81b5ccd",
        "name": "open dining room shades",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "23259",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 310,
        "y": 420,
        "wires": [
            [
                "1b984be8838e6815"
            ]
        ]
    },
    {
        "id": "5fc5b24cd49e520e",
        "type": "change",
        "z": "1cf0490e7de2f93d",
        "g": "746733f8c81b5ccd",
        "name": "open living room shades",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "11037",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 420,
        "wires": [
            [
                "1b49d418ac1d553d"
            ]
        ]
    },
    {
        "id": "1fcfbbdf6167f8c8",
        "type": "change",
        "z": "1cf0490e7de2f93d",
        "g": "e961376bbef01556",
        "name": "open dining room shades",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "23259",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 310,
        "y": 520,
        "wires": [
            [
                "407f68edfd369a25"
            ]
        ]
    },
    {
        "id": "86ad8ea7914b5e27",
        "type": "change",
        "z": "1cf0490e7de2f93d",
        "g": "e961376bbef01556",
        "name": "close living room shades",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "40564",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 520,
        "wires": [
            [
                "59f2f3b92b79087e"
            ]
        ]
    },
    {
        "id": "a0e918936b64e067",
        "type": "change",
        "z": "1cf0490e7de2f93d",
        "g": "56e03f40c1727182",
        "name": "close dining room shades",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "41405",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 310,
        "y": 620,
        "wires": [
            [
                "c906095c1f350eda"
            ]
        ]
    },
    {
        "id": "ea99355e0449d9ea",
        "type": "change",
        "z": "1cf0490e7de2f93d",
        "g": "56e03f40c1727182",
        "name": "open living room shades",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "11037",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 620,
        "wires": [
            [
                "e8a3ad681677753f"
            ]
        ]
    },
    {
        "id": "ad97bfa80b18c3c0",
        "type": "comment",
        "z": "1cf0490e7de2f93d",
        "name": "view info tab for this flow for important configuration and usage documentation",
        "info": "",
        "x": 390,
        "y": 40,
        "wires": []
    },
    {
        "id": "c27168b168847790",
        "type": "ui_chart",
        "z": "b12fd38c090c51f2",
        "g": "b438e0cbd64ef6ce",
        "name": "Sun Position",
        "group": "8055574ccb17e8ed",
        "order": 3,
        "width": "6",
        "height": "6",
        "label": "",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "-3.14159",
        "ymax": "3.14159",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 610,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "3a39c550369bac31",
        "type": "inject",
        "z": "b12fd38c090c51f2",
        "g": "b438e0cbd64ef6ce",
        "name": "at start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 180,
        "wires": [
            [
                "15ce56cf1449ce52"
            ]
        ]
    },
    {
        "id": "15ce56cf1449ce52",
        "type": "ui_date_picker",
        "z": "b12fd38c090c51f2",
        "g": "b438e0cbd64ef6ce",
        "name": "",
        "label": "Date",
        "group": "8055574ccb17e8ed",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 290,
        "y": 200,
        "wires": [
            [
                "f33b94d2cc59c348"
            ]
        ]
    },
    {
        "id": "f33b94d2cc59c348",
        "type": "function",
        "z": "b12fd38c090c51f2",
        "g": "b438e0cbd64ef6ce",
        "name": "sun positions",
        "func": "/*global suncalc*/\n\nconst msg2 = RED.util.cloneMessage(msg)\nconst msg3 = RED.util.cloneMessage(msg)\nconst latitude = env.get('LATITUDE')\nconst longitude = env.get('LONGITUDE')\nconst date = new Date(msg.payload)\nconst positions = []\nconst altitudes = []\nconst azimuths = []\nconst times = suncalc.getTimes(date, latitude, longitude)\nconst sunrise = times.sunrise.getTime()\nconst sunset = times.sunset.getTime()\nconst zenith = {\n    time: 0,\n    altitude: -(Math.PI / 2),\n    azimuth: 0\n}\n\nfor (let minute = sunrise; minute < sunset; minute += 60000) {\n\n    const position = suncalc.getPosition(new Date(minute), latitude, longitude)\n\n    position.time = minute\n    positions.push(position)\n    altitudes.push({ x: minute, y: position.altitude })\n    azimuths.push({ x: minute, y: position.azimuth })\n\n    if (position.altitude > zenith.altitude) {\n\n        zenith.time = minute\n        zenith.altitude = position.altitude\n        zenith.azimuth = position.azimuth\n\n    }\n}\n\nmsg.payload = [{\n    \"series\": [\"altitude\", \"azimuth\"],\n    \"data\": [\n        altitudes,\n        azimuths\n    ],\n    \"labels\": [\"\"]\n}]\n\nmsg2.payload = zenith\nmsg3.payload = positions\n\nreturn [\n    msg,\n    msg2,\n    msg3\n]",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "suncalc",
                "module": "suncalc"
            }
        ],
        "x": 430,
        "y": 200,
        "wires": [
            [
                "c27168b168847790"
            ],
            [
                "4dd293c16815dce3"
            ],
            [
                "e7bc056a5ca25bc5"
            ]
        ],
        "outputLabels": [
            "chart",
            "zenith",
            "positions"
        ]
    },
    {
        "id": "f72b11239792afcf",
        "type": "ui_template",
        "z": "b12fd38c090c51f2",
        "g": "b438e0cbd64ef6ce",
        "group": "8055574ccb17e8ed",
        "name": "Zenith",
        "order": 2,
        "width": "6",
        "height": "2",
        "format": "<div>\n    <table width=\"100%\" cellspacing=\"5px\" cellpadding=\"5px\">\n        <caption>zenith</caption>\n        <tr>\n            <th>time</th>\n            <th>altitude</th>\n            <th>azimuth</th>\n        </tr>\n        <tr>\n            <td>{{msg.payload.time}}</td>\n            <td>{{msg.payload.altitude}}</td>\n            <td>{{msg.payload.azimuth}}</td>\n        </tr>\n    </table>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 750,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "4dd293c16815dce3",
        "type": "function",
        "z": "b12fd38c090c51f2",
        "g": "b438e0cbd64ef6ce",
        "name": "format zenith",
        "func": "/**\n* @param {number} radians\n*/\nfunction truncate(radians) {\n\n    const decimals = 10000000\n    return Math.round(radians * decimals) / decimals\n\n}\n\nmsg.payload.time = new Date(msg.payload.time).toLocaleTimeString()\nmsg.payload.altitude = truncate(msg.payload.altitude)\nmsg.payload.azimuth = truncate(msg.payload.azimuth)\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 200,
        "wires": [
            [
                "f72b11239792afcf"
            ]
        ]
    },
    {
        "id": "3ffae20118b3f324",
        "type": "ui_text",
        "z": "b12fd38c090c51f2",
        "g": "8a81267cb12384d5",
        "group": "25c7f0078ed443dd",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Sunrise",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 360,
        "y": 460,
        "wires": []
    },
    {
        "id": "056b4e63ec2cd405",
        "type": "ui_text",
        "z": "b12fd38c090c51f2",
        "g": "8a81267cb12384d5",
        "group": "25c7f0078ed443dd",
        "order": 8,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Sunset",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 760,
        "y": 460,
        "wires": []
    },
    {
        "id": "64f954fed4bbe73e",
        "type": "ui_text",
        "z": "b12fd38c090c51f2",
        "g": "8a81267cb12384d5",
        "group": "25c7f0078ed443dd",
        "order": 9,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Bedtime",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1160,
        "y": 340,
        "wires": []
    },
    {
        "id": "4332d4706a43e2f6",
        "type": "ui_text",
        "z": "b12fd38c090c51f2",
        "g": "8a81267cb12384d5",
        "group": "25c7f0078ed443dd",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Time",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 370,
        "y": 340,
        "wires": []
    },
    {
        "id": "9e522923ebcadd47",
        "type": "ui_text",
        "z": "b12fd38c090c51f2",
        "g": "8a81267cb12384d5",
        "group": "25c7f0078ed443dd",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Theme",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 360,
        "y": 400,
        "wires": []
    },
    {
        "id": "cd359e0f643d8b52",
        "type": "subflow:be201d7a24b331c5",
        "z": "b12fd38c090c51f2",
        "g": "8a81267cb12384d5",
        "name": "nodered/automation/sunrise",
        "env": [
            {
                "name": "TOPIC",
                "value": "nodered/automation/sunrise",
                "type": "str"
            }
        ],
        "x": 160,
        "y": 460,
        "wires": [
            [
                "3ffae20118b3f324"
            ]
        ]
    },
    {
        "id": "6ce0fae7a630111f",
        "type": "subflow:be201d7a24b331c5",
        "z": "b12fd38c090c51f2",
        "g": "8a81267cb12384d5",
        "name": "nodered/automation/sunset",
        "env": [
            {
                "name": "TOPIC",
                "value": "nodered/automation/sunset",
                "type": "str"
            }
        ],
        "x": 550,
        "y": 460,
        "wires": [
            [
                "056b4e63ec2cd405"
            ]
        ]
    },
    {
        "id": "6fd30861ee594f7a",
        "type": "subflow:be201d7a24b331c5",
        "z": "b12fd38c090c51f2",
        "g": "8a81267cb12384d5",
        "name": "nodered/automation/bedtime",
        "env": [
            {
                "name": "TOPIC",
                "value": "nodered/automation/bedtime",
                "type": "str"
            }
        ],
        "x": 960,
        "y": 340,
        "wires": [
            [
                "64f954fed4bbe73e"
            ]
        ]
    },
    {
        "id": "7b3880a941748a69",
        "type": "mqtt in",
        "z": "b12fd38c090c51f2",
        "g": "8a81267cb12384d5",
        "name": "",
        "topic": "nodered/automation/time",
        "qos": "2",
        "datatype": "utf8",
        "broker": "722d62f3b93039c3",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 340,
        "wires": [
            [
                "4332d4706a43e2f6"
            ]
        ]
    },
    {
        "id": "a6c27a31c49422e4",
        "type": "mqtt in",
        "z": "b12fd38c090c51f2",
        "g": "8a81267cb12384d5",
        "name": "",
        "topic": "nodered/automation/theme",
        "qos": "2",
        "datatype": "utf8",
        "broker": "722d62f3b93039c3",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 400,
        "wires": [
            [
                "9e522923ebcadd47"
            ]
        ]
    },
    {
        "id": "03b32d05f0dc98c7",
        "type": "subflow:be201d7a24b331c5",
        "z": "b12fd38c090c51f2",
        "g": "8a81267cb12384d5",
        "name": "nodered/automation/midday",
        "env": [
            {
                "name": "TOPIC",
                "value": "nodered/automation/midday",
                "type": "str"
            }
        ],
        "x": 560,
        "y": 340,
        "wires": [
            [
                "b403745b92a95d79"
            ]
        ]
    },
    {
        "id": "3a0d9afd6a91a4b8",
        "type": "subflow:be201d7a24b331c5",
        "z": "b12fd38c090c51f2",
        "g": "8a81267cb12384d5",
        "name": "nodered/automation/afternoon",
        "env": [
            {
                "name": "TOPIC",
                "value": "nodered/automation/afternoon",
                "type": "str"
            }
        ],
        "x": 560,
        "y": 400,
        "wires": [
            [
                "119dc5e83c2a078f"
            ]
        ]
    },
    {
        "id": "119dc5e83c2a078f",
        "type": "ui_text",
        "z": "b12fd38c090c51f2",
        "g": "8a81267cb12384d5",
        "group": "25c7f0078ed443dd",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Afternoon",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 760,
        "y": 400,
        "wires": []
    },
    {
        "id": "b403745b92a95d79",
        "type": "ui_text",
        "z": "b12fd38c090c51f2",
        "g": "8a81267cb12384d5",
        "group": "25c7f0078ed443dd",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Midday",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 760,
        "y": 340,
        "wires": []
    },
    {
        "id": "c6ad3ce00565e461",
        "type": "ui_text",
        "z": "b12fd38c090c51f2",
        "g": "8a81267cb12384d5",
        "group": "25c7f0078ed443dd",
        "order": 10,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Altitude",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1160,
        "y": 400,
        "wires": []
    },
    {
        "id": "fb5206dc8bb107e5",
        "type": "ui_text",
        "z": "b12fd38c090c51f2",
        "g": "8a81267cb12384d5",
        "group": "25c7f0078ed443dd",
        "order": 11,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Azimuth",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1160,
        "y": 460,
        "wires": []
    },
    {
        "id": "61c5be84a6996eee",
        "type": "mqtt in",
        "z": "b12fd38c090c51f2",
        "g": "8a81267cb12384d5",
        "name": "",
        "topic": "nodered/automation/altitude",
        "qos": "2",
        "datatype": "json",
        "broker": "722d62f3b93039c3",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 960,
        "y": 400,
        "wires": [
            [
                "c6ad3ce00565e461"
            ]
        ]
    },
    {
        "id": "a921a5a41ab154fc",
        "type": "mqtt in",
        "z": "b12fd38c090c51f2",
        "g": "8a81267cb12384d5",
        "name": "",
        "topic": "nodered/automation/azimuth",
        "qos": "2",
        "datatype": "json",
        "broker": "722d62f3b93039c3",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 960,
        "y": 460,
        "wires": [
            [
                "fb5206dc8bb107e5"
            ]
        ]
    },
    {
        "id": "8fe5e01fe99f5026",
        "type": "inject",
        "z": "b12fd38c090c51f2",
        "g": "b438e0cbd64ef6ce",
        "name": "every morning",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "00 04 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 220,
        "wires": [
            [
                "15ce56cf1449ce52"
            ]
        ]
    },
    {
        "id": "e7bc056a5ca25bc5",
        "type": "change",
        "z": "b12fd38c090c51f2",
        "g": "b438e0cbd64ef6ce",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "sun-positions",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 650,
        "y": 240,
        "wires": [
            [
                "f9a4b2c24da44638"
            ]
        ]
    },
    {
        "id": "f9a4b2c24da44638",
        "type": "function",
        "z": "b12fd38c090c51f2",
        "g": "b438e0cbd64ef6ce",
        "name": "url",
        "func": "/*global os*/\n\nmsg.payload = 'http://' + os.hostname + '.local:1880/sunpositions'\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "os",
                "module": "os"
            }
        ],
        "x": 830,
        "y": 240,
        "wires": [
            [
                "eb296b561972b772"
            ]
        ]
    },
    {
        "id": "eb296b561972b772",
        "type": "ui_template",
        "z": "b12fd38c090c51f2",
        "g": "b438e0cbd64ef6ce",
        "group": "8055574ccb17e8ed",
        "name": "Download CSV",
        "order": 4,
        "width": 0,
        "height": 0,
        "format": "<div style=\"width:100%;text-align:center;\">\n    <a style=\"color:white;text-decoration:none;\" href=\"{{msg.payload}}\">Download</a>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 980,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "8b169767a6b4cbd9",
        "type": "http response",
        "z": "b12fd38c090c51f2",
        "g": "4b0f721c48fca435",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 950,
        "y": 60,
        "wires": []
    },
    {
        "id": "dbca9a86d3bcf1ec",
        "type": "function",
        "z": "b12fd38c090c51f2",
        "g": "4b0f721c48fca435",
        "name": "response",
        "func": "const date = new Date()\nconst timestamp = '-' +\n    date.getFullYear() +\n    '-' +\n    String(date.getMonth() + 1).padStart(2, '0') +\n    '-' +\n    String(date.getDate()).padStart(2, '0')\n\nmsg.headers = {\n    'Content-Type': 'text/plain; charset=UTF-8',\n    'Content-Disposition': 'attachment; filename=\"sun-positions' + timestamp + '.csv\"'\n}\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 60,
        "wires": [
            [
                "8b169767a6b4cbd9"
            ]
        ]
    },
    {
        "id": "f33c29023f26968a",
        "type": "http in",
        "z": "b12fd38c090c51f2",
        "g": "4b0f721c48fca435",
        "name": "",
        "url": "/sunpositions",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 60,
        "wires": [
            [
                "ba54b4d206406127"
            ]
        ]
    },
    {
        "id": "8d0db05f4d495979",
        "type": "csv",
        "z": "b12fd38c090c51f2",
        "g": "4b0f721c48fca435",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "time,altitude,azimuth",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 60,
        "wires": [
            [
                "dbca9a86d3bcf1ec"
            ]
        ]
    },
    {
        "id": "ba54b4d206406127",
        "type": "change",
        "z": "b12fd38c090c51f2",
        "g": "4b0f721c48fca435",
        "name": "global.sun-positions",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sun-positions",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 60,
        "wires": [
            [
                "b1ebe60c0c09e6c1"
            ]
        ]
    },
    {
        "id": "b1ebe60c0c09e6c1",
        "type": "function",
        "z": "b12fd38c090c51f2",
        "g": "4b0f721c48fca435",
        "name": "format for csv",
        "func": "msg.payload.forEach((/** @type {{ time: string | number | Date; }} */ position) => {\n\n    position.time = new Date(position.time).toLocaleTimeString()\n\n})\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 60,
        "wires": [
            [
                "8d0db05f4d495979"
            ]
        ]
    }
]